// Code generated by "enumer -type=TokenType"; DO NOT EDIT.

package lexer

import (
	"fmt"
	"strings"
)

const _TokenTypeName = "TokenErrorTokenEOFTokenCommentLineTokenCommentBlockTokenIdentifierTokenBreakTokenConstTokenContinueTokenElseTokenFallthroughTokenForTokenFuncTokenIfTokenImportTokenMapTokenRangeTokenReturnTokenSwitchTokenAddTokenSubTokenMulTokenDivTokenModTokenAndTokenOrTokenXorTokenLShiftTokenRShiftTokenAddAssignTokenSubAssignTokenMulAssignTokenDivAssignTokenModAssignTokenAndAssignTokenOrAssignTokenXorAssignTokenLShiftAssignTokenRShiftAssignTokenLogicalAndTokenLogicalOrTokenGreaterTokenIncTokenDecTokenEqualTokenLessTokenGreaterEqualTokenAssignTokenLogicalNotTokenNotEqualTokenLessEqualTokenAndNotAssignTokenCommaTokenEllipsisTokenLParenTokenLBracketTokenLBraceTokenSemicolonTokenDotTokenRParenTokenRBracketTokenRBraceTokenAndNotTokenColonTokenDecimalIntTokenBinaryTokenOctalTokenHexIntTokenDecimalFloatTokenHexFloatTokenRawStringTokenInterpretedString"

var _TokenTypeIndex = [...]uint16{0, 10, 18, 34, 51, 66, 76, 86, 99, 108, 124, 132, 141, 148, 159, 167, 177, 188, 199, 207, 215, 223, 231, 239, 247, 254, 262, 273, 284, 298, 312, 326, 340, 354, 368, 381, 395, 412, 429, 444, 458, 470, 478, 486, 496, 505, 522, 533, 548, 561, 575, 592, 602, 615, 626, 639, 650, 664, 672, 683, 696, 707, 718, 728, 743, 754, 764, 775, 792, 805, 819, 841}

const _TokenTypeLowerName = "tokenerrortokeneoftokencommentlinetokencommentblocktokenidentifiertokenbreaktokenconsttokencontinuetokenelsetokenfallthroughtokenfortokenfunctokeniftokenimporttokenmaptokenrangetokenreturntokenswitchtokenaddtokensubtokenmultokendivtokenmodtokenandtokenortokenxortokenlshifttokenrshifttokenaddassigntokensubassigntokenmulassigntokendivassigntokenmodassigntokenandassigntokenorassigntokenxorassigntokenlshiftassigntokenrshiftassigntokenlogicalandtokenlogicalortokengreatertokeninctokendectokenequaltokenlesstokengreaterequaltokenassigntokenlogicalnottokennotequaltokenlessequaltokenandnotassigntokencommatokenellipsistokenlparentokenlbrackettokenlbracetokensemicolontokendottokenrparentokenrbrackettokenrbracetokenandnottokencolontokendecimalinttokenbinarytokenoctaltokenhexinttokendecimalfloattokenhexfloattokenrawstringtokeninterpretedstring"

func (i TokenType) String() string {
	if i < 0 || i >= TokenType(len(_TokenTypeIndex)-1) {
		return fmt.Sprintf("TokenType(%d)", i)
	}
	return _TokenTypeName[_TokenTypeIndex[i]:_TokenTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TokenTypeNoOp() {
	var x [1]struct{}
	_ = x[TokenError-(0)]
	_ = x[TokenEOF-(1)]
	_ = x[TokenCommentLine-(2)]
	_ = x[TokenCommentBlock-(3)]
	_ = x[TokenIdentifier-(4)]
	_ = x[TokenBreak-(5)]
	_ = x[TokenConst-(6)]
	_ = x[TokenContinue-(7)]
	_ = x[TokenElse-(8)]
	_ = x[TokenFallthrough-(9)]
	_ = x[TokenFor-(10)]
	_ = x[TokenFunc-(11)]
	_ = x[TokenIf-(12)]
	_ = x[TokenImport-(13)]
	_ = x[TokenMap-(14)]
	_ = x[TokenRange-(15)]
	_ = x[TokenReturn-(16)]
	_ = x[TokenSwitch-(17)]
	_ = x[TokenAdd-(18)]
	_ = x[TokenSub-(19)]
	_ = x[TokenMul-(20)]
	_ = x[TokenDiv-(21)]
	_ = x[TokenMod-(22)]
	_ = x[TokenAnd-(23)]
	_ = x[TokenOr-(24)]
	_ = x[TokenXor-(25)]
	_ = x[TokenLShift-(26)]
	_ = x[TokenRShift-(27)]
	_ = x[TokenAddAssign-(28)]
	_ = x[TokenSubAssign-(29)]
	_ = x[TokenMulAssign-(30)]
	_ = x[TokenDivAssign-(31)]
	_ = x[TokenModAssign-(32)]
	_ = x[TokenAndAssign-(33)]
	_ = x[TokenOrAssign-(34)]
	_ = x[TokenXorAssign-(35)]
	_ = x[TokenLShiftAssign-(36)]
	_ = x[TokenRShiftAssign-(37)]
	_ = x[TokenLogicalAnd-(38)]
	_ = x[TokenLogicalOr-(39)]
	_ = x[TokenGreater-(40)]
	_ = x[TokenInc-(41)]
	_ = x[TokenDec-(42)]
	_ = x[TokenEqual-(43)]
	_ = x[TokenLess-(44)]
	_ = x[TokenGreaterEqual-(45)]
	_ = x[TokenAssign-(46)]
	_ = x[TokenLogicalNot-(47)]
	_ = x[TokenNotEqual-(48)]
	_ = x[TokenLessEqual-(49)]
	_ = x[TokenAndNotAssign-(50)]
	_ = x[TokenComma-(51)]
	_ = x[TokenEllipsis-(52)]
	_ = x[TokenLParen-(53)]
	_ = x[TokenLBracket-(54)]
	_ = x[TokenLBrace-(55)]
	_ = x[TokenSemicolon-(56)]
	_ = x[TokenDot-(57)]
	_ = x[TokenRParen-(58)]
	_ = x[TokenRBracket-(59)]
	_ = x[TokenRBrace-(60)]
	_ = x[TokenAndNot-(61)]
	_ = x[TokenColon-(62)]
	_ = x[TokenDecimalInt-(63)]
	_ = x[TokenBinary-(64)]
	_ = x[TokenOctal-(65)]
	_ = x[TokenHexInt-(66)]
	_ = x[TokenDecimalFloat-(67)]
	_ = x[TokenHexFloat-(68)]
	_ = x[TokenRawString-(69)]
	_ = x[TokenInterpretedString-(70)]
}

var _TokenTypeValues = []TokenType{TokenError, TokenEOF, TokenCommentLine, TokenCommentBlock, TokenIdentifier, TokenBreak, TokenConst, TokenContinue, TokenElse, TokenFallthrough, TokenFor, TokenFunc, TokenIf, TokenImport, TokenMap, TokenRange, TokenReturn, TokenSwitch, TokenAdd, TokenSub, TokenMul, TokenDiv, TokenMod, TokenAnd, TokenOr, TokenXor, TokenLShift, TokenRShift, TokenAddAssign, TokenSubAssign, TokenMulAssign, TokenDivAssign, TokenModAssign, TokenAndAssign, TokenOrAssign, TokenXorAssign, TokenLShiftAssign, TokenRShiftAssign, TokenLogicalAnd, TokenLogicalOr, TokenGreater, TokenInc, TokenDec, TokenEqual, TokenLess, TokenGreaterEqual, TokenAssign, TokenLogicalNot, TokenNotEqual, TokenLessEqual, TokenAndNotAssign, TokenComma, TokenEllipsis, TokenLParen, TokenLBracket, TokenLBrace, TokenSemicolon, TokenDot, TokenRParen, TokenRBracket, TokenRBrace, TokenAndNot, TokenColon, TokenDecimalInt, TokenBinary, TokenOctal, TokenHexInt, TokenDecimalFloat, TokenHexFloat, TokenRawString, TokenInterpretedString}

var _TokenTypeNameToValueMap = map[string]TokenType{
	_TokenTypeName[0:10]:         TokenError,
	_TokenTypeLowerName[0:10]:    TokenError,
	_TokenTypeName[10:18]:        TokenEOF,
	_TokenTypeLowerName[10:18]:   TokenEOF,
	_TokenTypeName[18:34]:        TokenCommentLine,
	_TokenTypeLowerName[18:34]:   TokenCommentLine,
	_TokenTypeName[34:51]:        TokenCommentBlock,
	_TokenTypeLowerName[34:51]:   TokenCommentBlock,
	_TokenTypeName[51:66]:        TokenIdentifier,
	_TokenTypeLowerName[51:66]:   TokenIdentifier,
	_TokenTypeName[66:76]:        TokenBreak,
	_TokenTypeLowerName[66:76]:   TokenBreak,
	_TokenTypeName[76:86]:        TokenConst,
	_TokenTypeLowerName[76:86]:   TokenConst,
	_TokenTypeName[86:99]:        TokenContinue,
	_TokenTypeLowerName[86:99]:   TokenContinue,
	_TokenTypeName[99:108]:       TokenElse,
	_TokenTypeLowerName[99:108]:  TokenElse,
	_TokenTypeName[108:124]:      TokenFallthrough,
	_TokenTypeLowerName[108:124]: TokenFallthrough,
	_TokenTypeName[124:132]:      TokenFor,
	_TokenTypeLowerName[124:132]: TokenFor,
	_TokenTypeName[132:141]:      TokenFunc,
	_TokenTypeLowerName[132:141]: TokenFunc,
	_TokenTypeName[141:148]:      TokenIf,
	_TokenTypeLowerName[141:148]: TokenIf,
	_TokenTypeName[148:159]:      TokenImport,
	_TokenTypeLowerName[148:159]: TokenImport,
	_TokenTypeName[159:167]:      TokenMap,
	_TokenTypeLowerName[159:167]: TokenMap,
	_TokenTypeName[167:177]:      TokenRange,
	_TokenTypeLowerName[167:177]: TokenRange,
	_TokenTypeName[177:188]:      TokenReturn,
	_TokenTypeLowerName[177:188]: TokenReturn,
	_TokenTypeName[188:199]:      TokenSwitch,
	_TokenTypeLowerName[188:199]: TokenSwitch,
	_TokenTypeName[199:207]:      TokenAdd,
	_TokenTypeLowerName[199:207]: TokenAdd,
	_TokenTypeName[207:215]:      TokenSub,
	_TokenTypeLowerName[207:215]: TokenSub,
	_TokenTypeName[215:223]:      TokenMul,
	_TokenTypeLowerName[215:223]: TokenMul,
	_TokenTypeName[223:231]:      TokenDiv,
	_TokenTypeLowerName[223:231]: TokenDiv,
	_TokenTypeName[231:239]:      TokenMod,
	_TokenTypeLowerName[231:239]: TokenMod,
	_TokenTypeName[239:247]:      TokenAnd,
	_TokenTypeLowerName[239:247]: TokenAnd,
	_TokenTypeName[247:254]:      TokenOr,
	_TokenTypeLowerName[247:254]: TokenOr,
	_TokenTypeName[254:262]:      TokenXor,
	_TokenTypeLowerName[254:262]: TokenXor,
	_TokenTypeName[262:273]:      TokenLShift,
	_TokenTypeLowerName[262:273]: TokenLShift,
	_TokenTypeName[273:284]:      TokenRShift,
	_TokenTypeLowerName[273:284]: TokenRShift,
	_TokenTypeName[284:298]:      TokenAddAssign,
	_TokenTypeLowerName[284:298]: TokenAddAssign,
	_TokenTypeName[298:312]:      TokenSubAssign,
	_TokenTypeLowerName[298:312]: TokenSubAssign,
	_TokenTypeName[312:326]:      TokenMulAssign,
	_TokenTypeLowerName[312:326]: TokenMulAssign,
	_TokenTypeName[326:340]:      TokenDivAssign,
	_TokenTypeLowerName[326:340]: TokenDivAssign,
	_TokenTypeName[340:354]:      TokenModAssign,
	_TokenTypeLowerName[340:354]: TokenModAssign,
	_TokenTypeName[354:368]:      TokenAndAssign,
	_TokenTypeLowerName[354:368]: TokenAndAssign,
	_TokenTypeName[368:381]:      TokenOrAssign,
	_TokenTypeLowerName[368:381]: TokenOrAssign,
	_TokenTypeName[381:395]:      TokenXorAssign,
	_TokenTypeLowerName[381:395]: TokenXorAssign,
	_TokenTypeName[395:412]:      TokenLShiftAssign,
	_TokenTypeLowerName[395:412]: TokenLShiftAssign,
	_TokenTypeName[412:429]:      TokenRShiftAssign,
	_TokenTypeLowerName[412:429]: TokenRShiftAssign,
	_TokenTypeName[429:444]:      TokenLogicalAnd,
	_TokenTypeLowerName[429:444]: TokenLogicalAnd,
	_TokenTypeName[444:458]:      TokenLogicalOr,
	_TokenTypeLowerName[444:458]: TokenLogicalOr,
	_TokenTypeName[458:470]:      TokenGreater,
	_TokenTypeLowerName[458:470]: TokenGreater,
	_TokenTypeName[470:478]:      TokenInc,
	_TokenTypeLowerName[470:478]: TokenInc,
	_TokenTypeName[478:486]:      TokenDec,
	_TokenTypeLowerName[478:486]: TokenDec,
	_TokenTypeName[486:496]:      TokenEqual,
	_TokenTypeLowerName[486:496]: TokenEqual,
	_TokenTypeName[496:505]:      TokenLess,
	_TokenTypeLowerName[496:505]: TokenLess,
	_TokenTypeName[505:522]:      TokenGreaterEqual,
	_TokenTypeLowerName[505:522]: TokenGreaterEqual,
	_TokenTypeName[522:533]:      TokenAssign,
	_TokenTypeLowerName[522:533]: TokenAssign,
	_TokenTypeName[533:548]:      TokenLogicalNot,
	_TokenTypeLowerName[533:548]: TokenLogicalNot,
	_TokenTypeName[548:561]:      TokenNotEqual,
	_TokenTypeLowerName[548:561]: TokenNotEqual,
	_TokenTypeName[561:575]:      TokenLessEqual,
	_TokenTypeLowerName[561:575]: TokenLessEqual,
	_TokenTypeName[575:592]:      TokenAndNotAssign,
	_TokenTypeLowerName[575:592]: TokenAndNotAssign,
	_TokenTypeName[592:602]:      TokenComma,
	_TokenTypeLowerName[592:602]: TokenComma,
	_TokenTypeName[602:615]:      TokenEllipsis,
	_TokenTypeLowerName[602:615]: TokenEllipsis,
	_TokenTypeName[615:626]:      TokenLParen,
	_TokenTypeLowerName[615:626]: TokenLParen,
	_TokenTypeName[626:639]:      TokenLBracket,
	_TokenTypeLowerName[626:639]: TokenLBracket,
	_TokenTypeName[639:650]:      TokenLBrace,
	_TokenTypeLowerName[639:650]: TokenLBrace,
	_TokenTypeName[650:664]:      TokenSemicolon,
	_TokenTypeLowerName[650:664]: TokenSemicolon,
	_TokenTypeName[664:672]:      TokenDot,
	_TokenTypeLowerName[664:672]: TokenDot,
	_TokenTypeName[672:683]:      TokenRParen,
	_TokenTypeLowerName[672:683]: TokenRParen,
	_TokenTypeName[683:696]:      TokenRBracket,
	_TokenTypeLowerName[683:696]: TokenRBracket,
	_TokenTypeName[696:707]:      TokenRBrace,
	_TokenTypeLowerName[696:707]: TokenRBrace,
	_TokenTypeName[707:718]:      TokenAndNot,
	_TokenTypeLowerName[707:718]: TokenAndNot,
	_TokenTypeName[718:728]:      TokenColon,
	_TokenTypeLowerName[718:728]: TokenColon,
	_TokenTypeName[728:743]:      TokenDecimalInt,
	_TokenTypeLowerName[728:743]: TokenDecimalInt,
	_TokenTypeName[743:754]:      TokenBinary,
	_TokenTypeLowerName[743:754]: TokenBinary,
	_TokenTypeName[754:764]:      TokenOctal,
	_TokenTypeLowerName[754:764]: TokenOctal,
	_TokenTypeName[764:775]:      TokenHexInt,
	_TokenTypeLowerName[764:775]: TokenHexInt,
	_TokenTypeName[775:792]:      TokenDecimalFloat,
	_TokenTypeLowerName[775:792]: TokenDecimalFloat,
	_TokenTypeName[792:805]:      TokenHexFloat,
	_TokenTypeLowerName[792:805]: TokenHexFloat,
	_TokenTypeName[805:819]:      TokenRawString,
	_TokenTypeLowerName[805:819]: TokenRawString,
	_TokenTypeName[819:841]:      TokenInterpretedString,
	_TokenTypeLowerName[819:841]: TokenInterpretedString,
}

var _TokenTypeNames = []string{
	_TokenTypeName[0:10],
	_TokenTypeName[10:18],
	_TokenTypeName[18:34],
	_TokenTypeName[34:51],
	_TokenTypeName[51:66],
	_TokenTypeName[66:76],
	_TokenTypeName[76:86],
	_TokenTypeName[86:99],
	_TokenTypeName[99:108],
	_TokenTypeName[108:124],
	_TokenTypeName[124:132],
	_TokenTypeName[132:141],
	_TokenTypeName[141:148],
	_TokenTypeName[148:159],
	_TokenTypeName[159:167],
	_TokenTypeName[167:177],
	_TokenTypeName[177:188],
	_TokenTypeName[188:199],
	_TokenTypeName[199:207],
	_TokenTypeName[207:215],
	_TokenTypeName[215:223],
	_TokenTypeName[223:231],
	_TokenTypeName[231:239],
	_TokenTypeName[239:247],
	_TokenTypeName[247:254],
	_TokenTypeName[254:262],
	_TokenTypeName[262:273],
	_TokenTypeName[273:284],
	_TokenTypeName[284:298],
	_TokenTypeName[298:312],
	_TokenTypeName[312:326],
	_TokenTypeName[326:340],
	_TokenTypeName[340:354],
	_TokenTypeName[354:368],
	_TokenTypeName[368:381],
	_TokenTypeName[381:395],
	_TokenTypeName[395:412],
	_TokenTypeName[412:429],
	_TokenTypeName[429:444],
	_TokenTypeName[444:458],
	_TokenTypeName[458:470],
	_TokenTypeName[470:478],
	_TokenTypeName[478:486],
	_TokenTypeName[486:496],
	_TokenTypeName[496:505],
	_TokenTypeName[505:522],
	_TokenTypeName[522:533],
	_TokenTypeName[533:548],
	_TokenTypeName[548:561],
	_TokenTypeName[561:575],
	_TokenTypeName[575:592],
	_TokenTypeName[592:602],
	_TokenTypeName[602:615],
	_TokenTypeName[615:626],
	_TokenTypeName[626:639],
	_TokenTypeName[639:650],
	_TokenTypeName[650:664],
	_TokenTypeName[664:672],
	_TokenTypeName[672:683],
	_TokenTypeName[683:696],
	_TokenTypeName[696:707],
	_TokenTypeName[707:718],
	_TokenTypeName[718:728],
	_TokenTypeName[728:743],
	_TokenTypeName[743:754],
	_TokenTypeName[754:764],
	_TokenTypeName[764:775],
	_TokenTypeName[775:792],
	_TokenTypeName[792:805],
	_TokenTypeName[805:819],
	_TokenTypeName[819:841],
}

// TokenTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TokenTypeString(s string) (TokenType, error) {
	if val, ok := _TokenTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TokenTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TokenType values", s)
}

// TokenTypeValues returns all values of the enum
func TokenTypeValues() []TokenType {
	return _TokenTypeValues
}

// TokenTypeStrings returns a slice of all String values of the enum
func TokenTypeStrings() []string {
	strs := make([]string, len(_TokenTypeNames))
	copy(strs, _TokenTypeNames)
	return strs
}

// IsATokenType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TokenType) IsATokenType() bool {
	for _, v := range _TokenTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
