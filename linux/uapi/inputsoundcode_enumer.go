// Code generated by "enumer -type=InputSoundCode"; DO NOT EDIT.

package uapi

import (
	"fmt"
	"strings"
)

const (
	_InputSoundCodeName_0      = "SND_CLICKSND_BELLSND_TONE"
	_InputSoundCodeLowerName_0 = "snd_clicksnd_bellsnd_tone"
	_InputSoundCodeName_1      = "SND_MAXSND_CNT"
	_InputSoundCodeLowerName_1 = "snd_maxsnd_cnt"
)

var (
	_InputSoundCodeIndex_0 = [...]uint8{0, 9, 17, 25}
	_InputSoundCodeIndex_1 = [...]uint8{0, 7, 14}
)

func (i InputSoundCode) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _InputSoundCodeName_0[_InputSoundCodeIndex_0[i]:_InputSoundCodeIndex_0[i+1]]
	case 7 <= i && i <= 8:
		i -= 7
		return _InputSoundCodeName_1[_InputSoundCodeIndex_1[i]:_InputSoundCodeIndex_1[i+1]]
	default:
		return fmt.Sprintf("InputSoundCode(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _InputSoundCodeNoOp() {
	var x [1]struct{}
	_ = x[SND_CLICK-(0)]
	_ = x[SND_BELL-(1)]
	_ = x[SND_TONE-(2)]
	_ = x[SND_MAX-(7)]
	_ = x[SND_CNT-(8)]
}

var _InputSoundCodeValues = []InputSoundCode{SND_CLICK, SND_BELL, SND_TONE, SND_MAX, SND_CNT}

var _InputSoundCodeNameToValueMap = map[string]InputSoundCode{
	_InputSoundCodeName_0[0:9]:        SND_CLICK,
	_InputSoundCodeLowerName_0[0:9]:   SND_CLICK,
	_InputSoundCodeName_0[9:17]:       SND_BELL,
	_InputSoundCodeLowerName_0[9:17]:  SND_BELL,
	_InputSoundCodeName_0[17:25]:      SND_TONE,
	_InputSoundCodeLowerName_0[17:25]: SND_TONE,
	_InputSoundCodeName_1[0:7]:        SND_MAX,
	_InputSoundCodeLowerName_1[0:7]:   SND_MAX,
	_InputSoundCodeName_1[7:14]:       SND_CNT,
	_InputSoundCodeLowerName_1[7:14]:  SND_CNT,
}

var _InputSoundCodeNames = []string{
	_InputSoundCodeName_0[0:9],
	_InputSoundCodeName_0[9:17],
	_InputSoundCodeName_0[17:25],
	_InputSoundCodeName_1[0:7],
	_InputSoundCodeName_1[7:14],
}

// InputSoundCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func InputSoundCodeString(s string) (InputSoundCode, error) {
	if val, ok := _InputSoundCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _InputSoundCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to InputSoundCode values", s)
}

// InputSoundCodeValues returns all values of the enum
func InputSoundCodeValues() []InputSoundCode {
	return _InputSoundCodeValues
}

// InputSoundCodeStrings returns a slice of all String values of the enum
func InputSoundCodeStrings() []string {
	strs := make([]string, len(_InputSoundCodeNames))
	copy(strs, _InputSoundCodeNames)
	return strs
}

// IsAInputSoundCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i InputSoundCode) IsAInputSoundCode() bool {
	for _, v := range _InputSoundCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
