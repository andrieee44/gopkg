// Code generated by "enumer -type=RepeatCode"; DO NOT EDIT.

package input

import (
	"fmt"
	"strings"
)

const _RepeatCodeName = "REP_DELAYREP_PERIODREP_CNT"

var _RepeatCodeIndex = [...]uint8{0, 9, 19, 26}

const _RepeatCodeLowerName = "rep_delayrep_periodrep_cnt"

func (i RepeatCode) String() string {
	if i >= RepeatCode(len(_RepeatCodeIndex)-1) {
		return fmt.Sprintf("RepeatCode(%d)", i)
	}
	return _RepeatCodeName[_RepeatCodeIndex[i]:_RepeatCodeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RepeatCodeNoOp() {
	var x [1]struct{}
	_ = x[REP_DELAY-(0)]
	_ = x[REP_PERIOD-(1)]
	_ = x[REP_CNT-(2)]
}

var _RepeatCodeValues = []RepeatCode{REP_DELAY, REP_PERIOD, REP_CNT}

var _RepeatCodeNameToValueMap = map[string]RepeatCode{
	_RepeatCodeName[0:9]:        REP_DELAY,
	_RepeatCodeLowerName[0:9]:   REP_DELAY,
	_RepeatCodeName[9:19]:       REP_PERIOD,
	_RepeatCodeLowerName[9:19]:  REP_PERIOD,
	_RepeatCodeName[19:26]:      REP_CNT,
	_RepeatCodeLowerName[19:26]: REP_CNT,
}

var _RepeatCodeNames = []string{
	_RepeatCodeName[0:9],
	_RepeatCodeName[9:19],
	_RepeatCodeName[19:26],
}

// RepeatCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RepeatCodeString(s string) (RepeatCode, error) {
	if val, ok := _RepeatCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RepeatCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RepeatCode values", s)
}

// RepeatCodeValues returns all values of the enum
func RepeatCodeValues() []RepeatCode {
	return _RepeatCodeValues
}

// RepeatCodeStrings returns a slice of all String values of the enum
func RepeatCodeStrings() []string {
	strs := make([]string, len(_RepeatCodeNames))
	copy(strs, _RepeatCodeNames)
	return strs
}

// IsARepeatCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RepeatCode) IsARepeatCode() bool {
	for _, v := range _RepeatCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
