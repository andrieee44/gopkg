// Code generated by "enumer -type=EventCode"; DO NOT EDIT.

package input

import (
	"fmt"
	"strings"
)

const (
	_EventCodeName_0      = "EV_SYNEV_KEYEV_RELEV_ABSEV_MSCEV_SW"
	_EventCodeLowerName_0 = "ev_synev_keyev_relev_absev_mscev_sw"
	_EventCodeName_1      = "EV_LEDEV_SND"
	_EventCodeLowerName_1 = "ev_ledev_snd"
	_EventCodeName_2      = "EV_REPEV_FFEV_PWREV_FF_STATUS"
	_EventCodeLowerName_2 = "ev_repev_ffev_pwrev_ff_status"
	_EventCodeName_3      = "EV_MAXEV_CNT"
	_EventCodeLowerName_3 = "ev_maxev_cnt"
)

var (
	_EventCodeIndex_0 = [...]uint8{0, 6, 12, 18, 24, 30, 35}
	_EventCodeIndex_1 = [...]uint8{0, 6, 12}
	_EventCodeIndex_2 = [...]uint8{0, 6, 11, 17, 29}
	_EventCodeIndex_3 = [...]uint8{0, 6, 12}
)

func (i EventCode) String() string {
	switch {
	case 0 <= i && i <= 5:
		return _EventCodeName_0[_EventCodeIndex_0[i]:_EventCodeIndex_0[i+1]]
	case 17 <= i && i <= 18:
		i -= 17
		return _EventCodeName_1[_EventCodeIndex_1[i]:_EventCodeIndex_1[i+1]]
	case 20 <= i && i <= 23:
		i -= 20
		return _EventCodeName_2[_EventCodeIndex_2[i]:_EventCodeIndex_2[i+1]]
	case 31 <= i && i <= 32:
		i -= 31
		return _EventCodeName_3[_EventCodeIndex_3[i]:_EventCodeIndex_3[i+1]]
	default:
		return fmt.Sprintf("EventCode(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _EventCodeNoOp() {
	var x [1]struct{}
	_ = x[EV_SYN-(0)]
	_ = x[EV_KEY-(1)]
	_ = x[EV_REL-(2)]
	_ = x[EV_ABS-(3)]
	_ = x[EV_MSC-(4)]
	_ = x[EV_SW-(5)]
	_ = x[EV_LED-(17)]
	_ = x[EV_SND-(18)]
	_ = x[EV_REP-(20)]
	_ = x[EV_FF-(21)]
	_ = x[EV_PWR-(22)]
	_ = x[EV_FF_STATUS-(23)]
	_ = x[EV_MAX-(31)]
	_ = x[EV_CNT-(32)]
}

var _EventCodeValues = []EventCode{EV_SYN, EV_KEY, EV_REL, EV_ABS, EV_MSC, EV_SW, EV_LED, EV_SND, EV_REP, EV_FF, EV_PWR, EV_FF_STATUS, EV_MAX, EV_CNT}

var _EventCodeNameToValueMap = map[string]EventCode{
	_EventCodeName_0[0:6]:        EV_SYN,
	_EventCodeLowerName_0[0:6]:   EV_SYN,
	_EventCodeName_0[6:12]:       EV_KEY,
	_EventCodeLowerName_0[6:12]:  EV_KEY,
	_EventCodeName_0[12:18]:      EV_REL,
	_EventCodeLowerName_0[12:18]: EV_REL,
	_EventCodeName_0[18:24]:      EV_ABS,
	_EventCodeLowerName_0[18:24]: EV_ABS,
	_EventCodeName_0[24:30]:      EV_MSC,
	_EventCodeLowerName_0[24:30]: EV_MSC,
	_EventCodeName_0[30:35]:      EV_SW,
	_EventCodeLowerName_0[30:35]: EV_SW,
	_EventCodeName_1[0:6]:        EV_LED,
	_EventCodeLowerName_1[0:6]:   EV_LED,
	_EventCodeName_1[6:12]:       EV_SND,
	_EventCodeLowerName_1[6:12]:  EV_SND,
	_EventCodeName_2[0:6]:        EV_REP,
	_EventCodeLowerName_2[0:6]:   EV_REP,
	_EventCodeName_2[6:11]:       EV_FF,
	_EventCodeLowerName_2[6:11]:  EV_FF,
	_EventCodeName_2[11:17]:      EV_PWR,
	_EventCodeLowerName_2[11:17]: EV_PWR,
	_EventCodeName_2[17:29]:      EV_FF_STATUS,
	_EventCodeLowerName_2[17:29]: EV_FF_STATUS,
	_EventCodeName_3[0:6]:        EV_MAX,
	_EventCodeLowerName_3[0:6]:   EV_MAX,
	_EventCodeName_3[6:12]:       EV_CNT,
	_EventCodeLowerName_3[6:12]:  EV_CNT,
}

var _EventCodeNames = []string{
	_EventCodeName_0[0:6],
	_EventCodeName_0[6:12],
	_EventCodeName_0[12:18],
	_EventCodeName_0[18:24],
	_EventCodeName_0[24:30],
	_EventCodeName_0[30:35],
	_EventCodeName_1[0:6],
	_EventCodeName_1[6:12],
	_EventCodeName_2[0:6],
	_EventCodeName_2[6:11],
	_EventCodeName_2[11:17],
	_EventCodeName_2[17:29],
	_EventCodeName_3[0:6],
	_EventCodeName_3[6:12],
}

// EventCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EventCodeString(s string) (EventCode, error) {
	if val, ok := _EventCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _EventCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to EventCode values", s)
}

// EventCodeValues returns all values of the enum
func EventCodeValues() []EventCode {
	return _EventCodeValues
}

// EventCodeStrings returns a slice of all String values of the enum
func EventCodeStrings() []string {
	strs := make([]string, len(_EventCodeNames))
	copy(strs, _EventCodeNames)
	return strs
}

// IsAEventCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i EventCode) IsAEventCode() bool {
	for _, v := range _EventCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
