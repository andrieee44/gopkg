// Code generated by "enumer -type=RelativeCode"; DO NOT EDIT.

package input

import (
	"fmt"
	"strings"
)

const (
	_RelativeCodeName_0      = "REL_XREL_YREL_ZREL_RXREL_RYREL_RZREL_HWHEELREL_DIALREL_WHEELREL_MISCREL_RESERVEDREL_WHEEL_HI_RESREL_HWHEEL_HI_RES"
	_RelativeCodeLowerName_0 = "rel_xrel_yrel_zrel_rxrel_ryrel_rzrel_hwheelrel_dialrel_wheelrel_miscrel_reservedrel_wheel_hi_resrel_hwheel_hi_res"
	_RelativeCodeName_1      = "REL_MAXREL_CNT"
	_RelativeCodeLowerName_1 = "rel_maxrel_cnt"
)

var (
	_RelativeCodeIndex_0 = [...]uint8{0, 5, 10, 15, 21, 27, 33, 43, 51, 60, 68, 80, 96, 113}
	_RelativeCodeIndex_1 = [...]uint8{0, 7, 14}
)

func (i RelativeCode) String() string {
	switch {
	case 0 <= i && i <= 12:
		return _RelativeCodeName_0[_RelativeCodeIndex_0[i]:_RelativeCodeIndex_0[i+1]]
	case 15 <= i && i <= 16:
		i -= 15
		return _RelativeCodeName_1[_RelativeCodeIndex_1[i]:_RelativeCodeIndex_1[i+1]]
	default:
		return fmt.Sprintf("RelativeCode(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RelativeCodeNoOp() {
	var x [1]struct{}
	_ = x[REL_X-(0)]
	_ = x[REL_Y-(1)]
	_ = x[REL_Z-(2)]
	_ = x[REL_RX-(3)]
	_ = x[REL_RY-(4)]
	_ = x[REL_RZ-(5)]
	_ = x[REL_HWHEEL-(6)]
	_ = x[REL_DIAL-(7)]
	_ = x[REL_WHEEL-(8)]
	_ = x[REL_MISC-(9)]
	_ = x[REL_RESERVED-(10)]
	_ = x[REL_WHEEL_HI_RES-(11)]
	_ = x[REL_HWHEEL_HI_RES-(12)]
	_ = x[REL_MAX-(15)]
	_ = x[REL_CNT-(16)]
}

var _RelativeCodeValues = []RelativeCode{REL_X, REL_Y, REL_Z, REL_RX, REL_RY, REL_RZ, REL_HWHEEL, REL_DIAL, REL_WHEEL, REL_MISC, REL_RESERVED, REL_WHEEL_HI_RES, REL_HWHEEL_HI_RES, REL_MAX, REL_CNT}

var _RelativeCodeNameToValueMap = map[string]RelativeCode{
	_RelativeCodeName_0[0:5]:         REL_X,
	_RelativeCodeLowerName_0[0:5]:    REL_X,
	_RelativeCodeName_0[5:10]:        REL_Y,
	_RelativeCodeLowerName_0[5:10]:   REL_Y,
	_RelativeCodeName_0[10:15]:       REL_Z,
	_RelativeCodeLowerName_0[10:15]:  REL_Z,
	_RelativeCodeName_0[15:21]:       REL_RX,
	_RelativeCodeLowerName_0[15:21]:  REL_RX,
	_RelativeCodeName_0[21:27]:       REL_RY,
	_RelativeCodeLowerName_0[21:27]:  REL_RY,
	_RelativeCodeName_0[27:33]:       REL_RZ,
	_RelativeCodeLowerName_0[27:33]:  REL_RZ,
	_RelativeCodeName_0[33:43]:       REL_HWHEEL,
	_RelativeCodeLowerName_0[33:43]:  REL_HWHEEL,
	_RelativeCodeName_0[43:51]:       REL_DIAL,
	_RelativeCodeLowerName_0[43:51]:  REL_DIAL,
	_RelativeCodeName_0[51:60]:       REL_WHEEL,
	_RelativeCodeLowerName_0[51:60]:  REL_WHEEL,
	_RelativeCodeName_0[60:68]:       REL_MISC,
	_RelativeCodeLowerName_0[60:68]:  REL_MISC,
	_RelativeCodeName_0[68:80]:       REL_RESERVED,
	_RelativeCodeLowerName_0[68:80]:  REL_RESERVED,
	_RelativeCodeName_0[80:96]:       REL_WHEEL_HI_RES,
	_RelativeCodeLowerName_0[80:96]:  REL_WHEEL_HI_RES,
	_RelativeCodeName_0[96:113]:      REL_HWHEEL_HI_RES,
	_RelativeCodeLowerName_0[96:113]: REL_HWHEEL_HI_RES,
	_RelativeCodeName_1[0:7]:         REL_MAX,
	_RelativeCodeLowerName_1[0:7]:    REL_MAX,
	_RelativeCodeName_1[7:14]:        REL_CNT,
	_RelativeCodeLowerName_1[7:14]:   REL_CNT,
}

var _RelativeCodeNames = []string{
	_RelativeCodeName_0[0:5],
	_RelativeCodeName_0[5:10],
	_RelativeCodeName_0[10:15],
	_RelativeCodeName_0[15:21],
	_RelativeCodeName_0[21:27],
	_RelativeCodeName_0[27:33],
	_RelativeCodeName_0[33:43],
	_RelativeCodeName_0[43:51],
	_RelativeCodeName_0[51:60],
	_RelativeCodeName_0[60:68],
	_RelativeCodeName_0[68:80],
	_RelativeCodeName_0[80:96],
	_RelativeCodeName_0[96:113],
	_RelativeCodeName_1[0:7],
	_RelativeCodeName_1[7:14],
}

// RelativeCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RelativeCodeString(s string) (RelativeCode, error) {
	if val, ok := _RelativeCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RelativeCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RelativeCode values", s)
}

// RelativeCodeValues returns all values of the enum
func RelativeCodeValues() []RelativeCode {
	return _RelativeCodeValues
}

// RelativeCodeStrings returns a slice of all String values of the enum
func RelativeCodeStrings() []string {
	strs := make([]string, len(_RelativeCodeNames))
	copy(strs, _RelativeCodeNames)
	return strs
}

// IsARelativeCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RelativeCode) IsARelativeCode() bool {
	for _, v := range _RelativeCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
