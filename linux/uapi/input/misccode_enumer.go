// Code generated by "enumer -type=MiscCode"; DO NOT EDIT.

package input

import (
	"fmt"
	"strings"
)

const (
	_MiscCodeName_0      = "MSC_SERIALMSC_PULSELEDMSC_GESTUREMSC_RAWMSC_SCANMSC_TIMESTAMP"
	_MiscCodeLowerName_0 = "msc_serialmsc_pulseledmsc_gesturemsc_rawmsc_scanmsc_timestamp"
	_MiscCodeName_1      = "MSC_MAXMSC_CNT"
	_MiscCodeLowerName_1 = "msc_maxmsc_cnt"
)

var (
	_MiscCodeIndex_0 = [...]uint8{0, 10, 22, 33, 40, 48, 61}
	_MiscCodeIndex_1 = [...]uint8{0, 7, 14}
)

func (i MiscCode) String() string {
	switch {
	case 0 <= i && i <= 5:
		return _MiscCodeName_0[_MiscCodeIndex_0[i]:_MiscCodeIndex_0[i+1]]
	case 7 <= i && i <= 8:
		i -= 7
		return _MiscCodeName_1[_MiscCodeIndex_1[i]:_MiscCodeIndex_1[i+1]]
	default:
		return fmt.Sprintf("MiscCode(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MiscCodeNoOp() {
	var x [1]struct{}
	_ = x[MSC_SERIAL-(0)]
	_ = x[MSC_PULSELED-(1)]
	_ = x[MSC_GESTURE-(2)]
	_ = x[MSC_RAW-(3)]
	_ = x[MSC_SCAN-(4)]
	_ = x[MSC_TIMESTAMP-(5)]
	_ = x[MSC_MAX-(7)]
	_ = x[MSC_CNT-(8)]
}

var _MiscCodeValues = []MiscCode{MSC_SERIAL, MSC_PULSELED, MSC_GESTURE, MSC_RAW, MSC_SCAN, MSC_TIMESTAMP, MSC_MAX, MSC_CNT}

var _MiscCodeNameToValueMap = map[string]MiscCode{
	_MiscCodeName_0[0:10]:       MSC_SERIAL,
	_MiscCodeLowerName_0[0:10]:  MSC_SERIAL,
	_MiscCodeName_0[10:22]:      MSC_PULSELED,
	_MiscCodeLowerName_0[10:22]: MSC_PULSELED,
	_MiscCodeName_0[22:33]:      MSC_GESTURE,
	_MiscCodeLowerName_0[22:33]: MSC_GESTURE,
	_MiscCodeName_0[33:40]:      MSC_RAW,
	_MiscCodeLowerName_0[33:40]: MSC_RAW,
	_MiscCodeName_0[40:48]:      MSC_SCAN,
	_MiscCodeLowerName_0[40:48]: MSC_SCAN,
	_MiscCodeName_0[48:61]:      MSC_TIMESTAMP,
	_MiscCodeLowerName_0[48:61]: MSC_TIMESTAMP,
	_MiscCodeName_1[0:7]:        MSC_MAX,
	_MiscCodeLowerName_1[0:7]:   MSC_MAX,
	_MiscCodeName_1[7:14]:       MSC_CNT,
	_MiscCodeLowerName_1[7:14]:  MSC_CNT,
}

var _MiscCodeNames = []string{
	_MiscCodeName_0[0:10],
	_MiscCodeName_0[10:22],
	_MiscCodeName_0[22:33],
	_MiscCodeName_0[33:40],
	_MiscCodeName_0[40:48],
	_MiscCodeName_0[48:61],
	_MiscCodeName_1[0:7],
	_MiscCodeName_1[7:14],
}

// MiscCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MiscCodeString(s string) (MiscCode, error) {
	if val, ok := _MiscCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MiscCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MiscCode values", s)
}

// MiscCodeValues returns all values of the enum
func MiscCodeValues() []MiscCode {
	return _MiscCodeValues
}

// MiscCodeStrings returns a slice of all String values of the enum
func MiscCodeStrings() []string {
	strs := make([]string, len(_MiscCodeNames))
	copy(strs, _MiscCodeNames)
	return strs
}

// IsAMiscCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MiscCode) IsAMiscCode() bool {
	for _, v := range _MiscCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
