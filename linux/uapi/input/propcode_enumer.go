// Code generated by "enumer -type=PropCode"; DO NOT EDIT.

package input

import (
	"fmt"
	"strings"
)

const (
	_PropCodeName_0      = "INPUT_PROP_POINTERINPUT_PROP_DIRECTINPUT_PROP_BUTTONPADINPUT_PROP_SEMI_MTINPUT_PROP_TOPBUTTONPADINPUT_PROP_POINTING_STICKINPUT_PROP_ACCELEROMETER"
	_PropCodeLowerName_0 = "input_prop_pointerinput_prop_directinput_prop_buttonpadinput_prop_semi_mtinput_prop_topbuttonpadinput_prop_pointing_stickinput_prop_accelerometer"
	_PropCodeName_1      = "INPUT_PROP_MAXINPUT_PROP_CNT"
	_PropCodeLowerName_1 = "input_prop_maxinput_prop_cnt"
)

var (
	_PropCodeIndex_0 = [...]uint8{0, 18, 35, 55, 73, 96, 121, 145}
	_PropCodeIndex_1 = [...]uint8{0, 14, 28}
)

func (i PropCode) String() string {
	switch {
	case 0 <= i && i <= 6:
		return _PropCodeName_0[_PropCodeIndex_0[i]:_PropCodeIndex_0[i+1]]
	case 31 <= i && i <= 32:
		i -= 31
		return _PropCodeName_1[_PropCodeIndex_1[i]:_PropCodeIndex_1[i+1]]
	default:
		return fmt.Sprintf("PropCode(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PropCodeNoOp() {
	var x [1]struct{}
	_ = x[INPUT_PROP_POINTER-(0)]
	_ = x[INPUT_PROP_DIRECT-(1)]
	_ = x[INPUT_PROP_BUTTONPAD-(2)]
	_ = x[INPUT_PROP_SEMI_MT-(3)]
	_ = x[INPUT_PROP_TOPBUTTONPAD-(4)]
	_ = x[INPUT_PROP_POINTING_STICK-(5)]
	_ = x[INPUT_PROP_ACCELEROMETER-(6)]
	_ = x[INPUT_PROP_MAX-(31)]
	_ = x[INPUT_PROP_CNT-(32)]
}

var _PropCodeValues = []PropCode{INPUT_PROP_POINTER, INPUT_PROP_DIRECT, INPUT_PROP_BUTTONPAD, INPUT_PROP_SEMI_MT, INPUT_PROP_TOPBUTTONPAD, INPUT_PROP_POINTING_STICK, INPUT_PROP_ACCELEROMETER, INPUT_PROP_MAX, INPUT_PROP_CNT}

var _PropCodeNameToValueMap = map[string]PropCode{
	_PropCodeName_0[0:18]:         INPUT_PROP_POINTER,
	_PropCodeLowerName_0[0:18]:    INPUT_PROP_POINTER,
	_PropCodeName_0[18:35]:        INPUT_PROP_DIRECT,
	_PropCodeLowerName_0[18:35]:   INPUT_PROP_DIRECT,
	_PropCodeName_0[35:55]:        INPUT_PROP_BUTTONPAD,
	_PropCodeLowerName_0[35:55]:   INPUT_PROP_BUTTONPAD,
	_PropCodeName_0[55:73]:        INPUT_PROP_SEMI_MT,
	_PropCodeLowerName_0[55:73]:   INPUT_PROP_SEMI_MT,
	_PropCodeName_0[73:96]:        INPUT_PROP_TOPBUTTONPAD,
	_PropCodeLowerName_0[73:96]:   INPUT_PROP_TOPBUTTONPAD,
	_PropCodeName_0[96:121]:       INPUT_PROP_POINTING_STICK,
	_PropCodeLowerName_0[96:121]:  INPUT_PROP_POINTING_STICK,
	_PropCodeName_0[121:145]:      INPUT_PROP_ACCELEROMETER,
	_PropCodeLowerName_0[121:145]: INPUT_PROP_ACCELEROMETER,
	_PropCodeName_1[0:14]:         INPUT_PROP_MAX,
	_PropCodeLowerName_1[0:14]:    INPUT_PROP_MAX,
	_PropCodeName_1[14:28]:        INPUT_PROP_CNT,
	_PropCodeLowerName_1[14:28]:   INPUT_PROP_CNT,
}

var _PropCodeNames = []string{
	_PropCodeName_0[0:18],
	_PropCodeName_0[18:35],
	_PropCodeName_0[35:55],
	_PropCodeName_0[55:73],
	_PropCodeName_0[73:96],
	_PropCodeName_0[96:121],
	_PropCodeName_0[121:145],
	_PropCodeName_1[0:14],
	_PropCodeName_1[14:28],
}

// PropCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PropCodeString(s string) (PropCode, error) {
	if val, ok := _PropCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PropCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PropCode values", s)
}

// PropCodeValues returns all values of the enum
func PropCodeValues() []PropCode {
	return _PropCodeValues
}

// PropCodeStrings returns a slice of all String values of the enum
func PropCodeStrings() []string {
	strs := make([]string, len(_PropCodeNames))
	copy(strs, _PropCodeNames)
	return strs
}

// IsAPropCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PropCode) IsAPropCode() bool {
	for _, v := range _PropCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
