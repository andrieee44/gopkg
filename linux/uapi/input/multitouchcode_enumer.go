// Code generated by "enumer -type=MultiTouchCode"; DO NOT EDIT.

package input

import (
	"fmt"
	"strings"
)

const (
	_MultiTouchCodeName_0      = "MT_TOOL_FINGERMT_TOOL_PENMT_TOOL_PALM"
	_MultiTouchCodeLowerName_0 = "mt_tool_fingermt_tool_penmt_tool_palm"
	_MultiTouchCodeName_1      = "MT_TOOL_DIAL"
	_MultiTouchCodeLowerName_1 = "mt_tool_dial"
	_MultiTouchCodeName_2      = "MT_TOOL_MAX"
	_MultiTouchCodeLowerName_2 = "mt_tool_max"
)

var (
	_MultiTouchCodeIndex_0 = [...]uint8{0, 14, 25, 37}
	_MultiTouchCodeIndex_1 = [...]uint8{0, 12}
	_MultiTouchCodeIndex_2 = [...]uint8{0, 11}
)

func (i MultiTouchCode) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _MultiTouchCodeName_0[_MultiTouchCodeIndex_0[i]:_MultiTouchCodeIndex_0[i+1]]
	case i == 10:
		return _MultiTouchCodeName_1
	case i == 15:
		return _MultiTouchCodeName_2
	default:
		return fmt.Sprintf("MultiTouchCode(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MultiTouchCodeNoOp() {
	var x [1]struct{}
	_ = x[MT_TOOL_FINGER-(0)]
	_ = x[MT_TOOL_PEN-(1)]
	_ = x[MT_TOOL_PALM-(2)]
	_ = x[MT_TOOL_DIAL-(10)]
	_ = x[MT_TOOL_MAX-(15)]
}

var _MultiTouchCodeValues = []MultiTouchCode{MT_TOOL_FINGER, MT_TOOL_PEN, MT_TOOL_PALM, MT_TOOL_DIAL, MT_TOOL_MAX}

var _MultiTouchCodeNameToValueMap = map[string]MultiTouchCode{
	_MultiTouchCodeName_0[0:14]:       MT_TOOL_FINGER,
	_MultiTouchCodeLowerName_0[0:14]:  MT_TOOL_FINGER,
	_MultiTouchCodeName_0[14:25]:      MT_TOOL_PEN,
	_MultiTouchCodeLowerName_0[14:25]: MT_TOOL_PEN,
	_MultiTouchCodeName_0[25:37]:      MT_TOOL_PALM,
	_MultiTouchCodeLowerName_0[25:37]: MT_TOOL_PALM,
	_MultiTouchCodeName_1[0:12]:       MT_TOOL_DIAL,
	_MultiTouchCodeLowerName_1[0:12]:  MT_TOOL_DIAL,
	_MultiTouchCodeName_2[0:11]:       MT_TOOL_MAX,
	_MultiTouchCodeLowerName_2[0:11]:  MT_TOOL_MAX,
}

var _MultiTouchCodeNames = []string{
	_MultiTouchCodeName_0[0:14],
	_MultiTouchCodeName_0[14:25],
	_MultiTouchCodeName_0[25:37],
	_MultiTouchCodeName_1[0:12],
	_MultiTouchCodeName_2[0:11],
}

// MultiTouchCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MultiTouchCodeString(s string) (MultiTouchCode, error) {
	if val, ok := _MultiTouchCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MultiTouchCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MultiTouchCode values", s)
}

// MultiTouchCodeValues returns all values of the enum
func MultiTouchCodeValues() []MultiTouchCode {
	return _MultiTouchCodeValues
}

// MultiTouchCodeStrings returns a slice of all String values of the enum
func MultiTouchCodeStrings() []string {
	strs := make([]string, len(_MultiTouchCodeNames))
	copy(strs, _MultiTouchCodeNames)
	return strs
}

// IsAMultiTouchCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MultiTouchCode) IsAMultiTouchCode() bool {
	for _, v := range _MultiTouchCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
