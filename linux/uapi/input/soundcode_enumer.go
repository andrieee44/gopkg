// Code generated by "enumer -type=SoundCode"; DO NOT EDIT.

package input

import (
	"fmt"
	"strings"
)

const (
	_SoundCodeName_0      = "SND_CLICKSND_BELLSND_TONE"
	_SoundCodeLowerName_0 = "snd_clicksnd_bellsnd_tone"
	_SoundCodeName_1      = "SND_MAXSND_CNT"
	_SoundCodeLowerName_1 = "snd_maxsnd_cnt"
)

var (
	_SoundCodeIndex_0 = [...]uint8{0, 9, 17, 25}
	_SoundCodeIndex_1 = [...]uint8{0, 7, 14}
)

func (i SoundCode) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _SoundCodeName_0[_SoundCodeIndex_0[i]:_SoundCodeIndex_0[i+1]]
	case 7 <= i && i <= 8:
		i -= 7
		return _SoundCodeName_1[_SoundCodeIndex_1[i]:_SoundCodeIndex_1[i+1]]
	default:
		return fmt.Sprintf("SoundCode(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SoundCodeNoOp() {
	var x [1]struct{}
	_ = x[SND_CLICK-(0)]
	_ = x[SND_BELL-(1)]
	_ = x[SND_TONE-(2)]
	_ = x[SND_MAX-(7)]
	_ = x[SND_CNT-(8)]
}

var _SoundCodeValues = []SoundCode{SND_CLICK, SND_BELL, SND_TONE, SND_MAX, SND_CNT}

var _SoundCodeNameToValueMap = map[string]SoundCode{
	_SoundCodeName_0[0:9]:        SND_CLICK,
	_SoundCodeLowerName_0[0:9]:   SND_CLICK,
	_SoundCodeName_0[9:17]:       SND_BELL,
	_SoundCodeLowerName_0[9:17]:  SND_BELL,
	_SoundCodeName_0[17:25]:      SND_TONE,
	_SoundCodeLowerName_0[17:25]: SND_TONE,
	_SoundCodeName_1[0:7]:        SND_MAX,
	_SoundCodeLowerName_1[0:7]:   SND_MAX,
	_SoundCodeName_1[7:14]:       SND_CNT,
	_SoundCodeLowerName_1[7:14]:  SND_CNT,
}

var _SoundCodeNames = []string{
	_SoundCodeName_0[0:9],
	_SoundCodeName_0[9:17],
	_SoundCodeName_0[17:25],
	_SoundCodeName_1[0:7],
	_SoundCodeName_1[7:14],
}

// SoundCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SoundCodeString(s string) (SoundCode, error) {
	if val, ok := _SoundCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SoundCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SoundCode values", s)
}

// SoundCodeValues returns all values of the enum
func SoundCodeValues() []SoundCode {
	return _SoundCodeValues
}

// SoundCodeStrings returns a slice of all String values of the enum
func SoundCodeStrings() []string {
	strs := make([]string, len(_SoundCodeNames))
	copy(strs, _SoundCodeNames)
	return strs
}

// IsASoundCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SoundCode) IsASoundCode() bool {
	for _, v := range _SoundCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
