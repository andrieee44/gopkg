// Code generated by "enumer -type=SyncCode"; DO NOT EDIT.

package input

import (
	"fmt"
	"strings"
)

const (
	_SyncCodeName_0      = "SYN_REPORTSYN_CONFIGSYN_MT_REPORTSYN_DROPPED"
	_SyncCodeLowerName_0 = "syn_reportsyn_configsyn_mt_reportsyn_dropped"
	_SyncCodeName_1      = "SYN_MAXSYN_CNT"
	_SyncCodeLowerName_1 = "syn_maxsyn_cnt"
)

var (
	_SyncCodeIndex_0 = [...]uint8{0, 10, 20, 33, 44}
	_SyncCodeIndex_1 = [...]uint8{0, 7, 14}
)

func (i SyncCode) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _SyncCodeName_0[_SyncCodeIndex_0[i]:_SyncCodeIndex_0[i+1]]
	case 15 <= i && i <= 16:
		i -= 15
		return _SyncCodeName_1[_SyncCodeIndex_1[i]:_SyncCodeIndex_1[i+1]]
	default:
		return fmt.Sprintf("SyncCode(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SyncCodeNoOp() {
	var x [1]struct{}
	_ = x[SYN_REPORT-(0)]
	_ = x[SYN_CONFIG-(1)]
	_ = x[SYN_MT_REPORT-(2)]
	_ = x[SYN_DROPPED-(3)]
	_ = x[SYN_MAX-(15)]
	_ = x[SYN_CNT-(16)]
}

var _SyncCodeValues = []SyncCode{SYN_REPORT, SYN_CONFIG, SYN_MT_REPORT, SYN_DROPPED, SYN_MAX, SYN_CNT}

var _SyncCodeNameToValueMap = map[string]SyncCode{
	_SyncCodeName_0[0:10]:       SYN_REPORT,
	_SyncCodeLowerName_0[0:10]:  SYN_REPORT,
	_SyncCodeName_0[10:20]:      SYN_CONFIG,
	_SyncCodeLowerName_0[10:20]: SYN_CONFIG,
	_SyncCodeName_0[20:33]:      SYN_MT_REPORT,
	_SyncCodeLowerName_0[20:33]: SYN_MT_REPORT,
	_SyncCodeName_0[33:44]:      SYN_DROPPED,
	_SyncCodeLowerName_0[33:44]: SYN_DROPPED,
	_SyncCodeName_1[0:7]:        SYN_MAX,
	_SyncCodeLowerName_1[0:7]:   SYN_MAX,
	_SyncCodeName_1[7:14]:       SYN_CNT,
	_SyncCodeLowerName_1[7:14]:  SYN_CNT,
}

var _SyncCodeNames = []string{
	_SyncCodeName_0[0:10],
	_SyncCodeName_0[10:20],
	_SyncCodeName_0[20:33],
	_SyncCodeName_0[33:44],
	_SyncCodeName_1[0:7],
	_SyncCodeName_1[7:14],
}

// SyncCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SyncCodeString(s string) (SyncCode, error) {
	if val, ok := _SyncCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SyncCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SyncCode values", s)
}

// SyncCodeValues returns all values of the enum
func SyncCodeValues() []SyncCode {
	return _SyncCodeValues
}

// SyncCodeStrings returns a slice of all String values of the enum
func SyncCodeStrings() []string {
	strs := make([]string, len(_SyncCodeNames))
	copy(strs, _SyncCodeNames)
	return strs
}

// IsASyncCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SyncCode) IsASyncCode() bool {
	for _, v := range _SyncCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
