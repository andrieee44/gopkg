// Code generated by "enumer -type=SwitchCode"; DO NOT EDIT.

package input

import (
	"fmt"
	"strings"
)

const _SwitchCodeName = "SW_LIDSW_TABLET_MODESW_HEADPHONE_INSERTSW_RFKILL_ALLSW_MICROPHONE_INSERTSW_DOCKSW_LINEOUT_INSERTSW_JACK_PHYSICAL_INSERTSW_VIDEOOUT_INSERTSW_CAMERA_LENS_COVERSW_KEYPAD_SLIDESW_FRONT_PROXIMITYSW_ROTATE_LOCKSW_LINEIN_INSERTSW_MUTE_DEVICESW_PEN_INSERTEDSW_MACHINE_COVERSW_USB_INSERTSW_CNT"

var _SwitchCodeIndex = [...]uint16{0, 6, 20, 39, 52, 72, 79, 96, 119, 137, 157, 172, 190, 204, 220, 234, 249, 265, 278, 284}

const _SwitchCodeLowerName = "sw_lidsw_tablet_modesw_headphone_insertsw_rfkill_allsw_microphone_insertsw_docksw_lineout_insertsw_jack_physical_insertsw_videoout_insertsw_camera_lens_coversw_keypad_slidesw_front_proximitysw_rotate_locksw_linein_insertsw_mute_devicesw_pen_insertedsw_machine_coversw_usb_insertsw_cnt"

func (i SwitchCode) String() string {
	if i >= SwitchCode(len(_SwitchCodeIndex)-1) {
		return fmt.Sprintf("SwitchCode(%d)", i)
	}
	return _SwitchCodeName[_SwitchCodeIndex[i]:_SwitchCodeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SwitchCodeNoOp() {
	var x [1]struct{}
	_ = x[SW_LID-(0)]
	_ = x[SW_TABLET_MODE-(1)]
	_ = x[SW_HEADPHONE_INSERT-(2)]
	_ = x[SW_RFKILL_ALL-(3)]
	_ = x[SW_MICROPHONE_INSERT-(4)]
	_ = x[SW_DOCK-(5)]
	_ = x[SW_LINEOUT_INSERT-(6)]
	_ = x[SW_JACK_PHYSICAL_INSERT-(7)]
	_ = x[SW_VIDEOOUT_INSERT-(8)]
	_ = x[SW_CAMERA_LENS_COVER-(9)]
	_ = x[SW_KEYPAD_SLIDE-(10)]
	_ = x[SW_FRONT_PROXIMITY-(11)]
	_ = x[SW_ROTATE_LOCK-(12)]
	_ = x[SW_LINEIN_INSERT-(13)]
	_ = x[SW_MUTE_DEVICE-(14)]
	_ = x[SW_PEN_INSERTED-(15)]
	_ = x[SW_MACHINE_COVER-(16)]
	_ = x[SW_USB_INSERT-(17)]
	_ = x[SW_CNT-(18)]
}

var _SwitchCodeValues = []SwitchCode{SW_LID, SW_TABLET_MODE, SW_HEADPHONE_INSERT, SW_RFKILL_ALL, SW_MICROPHONE_INSERT, SW_DOCK, SW_LINEOUT_INSERT, SW_JACK_PHYSICAL_INSERT, SW_VIDEOOUT_INSERT, SW_CAMERA_LENS_COVER, SW_KEYPAD_SLIDE, SW_FRONT_PROXIMITY, SW_ROTATE_LOCK, SW_LINEIN_INSERT, SW_MUTE_DEVICE, SW_PEN_INSERTED, SW_MACHINE_COVER, SW_USB_INSERT, SW_CNT}

var _SwitchCodeNameToValueMap = map[string]SwitchCode{
	_SwitchCodeName[0:6]:          SW_LID,
	_SwitchCodeLowerName[0:6]:     SW_LID,
	_SwitchCodeName[6:20]:         SW_TABLET_MODE,
	_SwitchCodeLowerName[6:20]:    SW_TABLET_MODE,
	_SwitchCodeName[20:39]:        SW_HEADPHONE_INSERT,
	_SwitchCodeLowerName[20:39]:   SW_HEADPHONE_INSERT,
	_SwitchCodeName[39:52]:        SW_RFKILL_ALL,
	_SwitchCodeLowerName[39:52]:   SW_RFKILL_ALL,
	_SwitchCodeName[52:72]:        SW_MICROPHONE_INSERT,
	_SwitchCodeLowerName[52:72]:   SW_MICROPHONE_INSERT,
	_SwitchCodeName[72:79]:        SW_DOCK,
	_SwitchCodeLowerName[72:79]:   SW_DOCK,
	_SwitchCodeName[79:96]:        SW_LINEOUT_INSERT,
	_SwitchCodeLowerName[79:96]:   SW_LINEOUT_INSERT,
	_SwitchCodeName[96:119]:       SW_JACK_PHYSICAL_INSERT,
	_SwitchCodeLowerName[96:119]:  SW_JACK_PHYSICAL_INSERT,
	_SwitchCodeName[119:137]:      SW_VIDEOOUT_INSERT,
	_SwitchCodeLowerName[119:137]: SW_VIDEOOUT_INSERT,
	_SwitchCodeName[137:157]:      SW_CAMERA_LENS_COVER,
	_SwitchCodeLowerName[137:157]: SW_CAMERA_LENS_COVER,
	_SwitchCodeName[157:172]:      SW_KEYPAD_SLIDE,
	_SwitchCodeLowerName[157:172]: SW_KEYPAD_SLIDE,
	_SwitchCodeName[172:190]:      SW_FRONT_PROXIMITY,
	_SwitchCodeLowerName[172:190]: SW_FRONT_PROXIMITY,
	_SwitchCodeName[190:204]:      SW_ROTATE_LOCK,
	_SwitchCodeLowerName[190:204]: SW_ROTATE_LOCK,
	_SwitchCodeName[204:220]:      SW_LINEIN_INSERT,
	_SwitchCodeLowerName[204:220]: SW_LINEIN_INSERT,
	_SwitchCodeName[220:234]:      SW_MUTE_DEVICE,
	_SwitchCodeLowerName[220:234]: SW_MUTE_DEVICE,
	_SwitchCodeName[234:249]:      SW_PEN_INSERTED,
	_SwitchCodeLowerName[234:249]: SW_PEN_INSERTED,
	_SwitchCodeName[249:265]:      SW_MACHINE_COVER,
	_SwitchCodeLowerName[249:265]: SW_MACHINE_COVER,
	_SwitchCodeName[265:278]:      SW_USB_INSERT,
	_SwitchCodeLowerName[265:278]: SW_USB_INSERT,
	_SwitchCodeName[278:284]:      SW_CNT,
	_SwitchCodeLowerName[278:284]: SW_CNT,
}

var _SwitchCodeNames = []string{
	_SwitchCodeName[0:6],
	_SwitchCodeName[6:20],
	_SwitchCodeName[20:39],
	_SwitchCodeName[39:52],
	_SwitchCodeName[52:72],
	_SwitchCodeName[72:79],
	_SwitchCodeName[79:96],
	_SwitchCodeName[96:119],
	_SwitchCodeName[119:137],
	_SwitchCodeName[137:157],
	_SwitchCodeName[157:172],
	_SwitchCodeName[172:190],
	_SwitchCodeName[190:204],
	_SwitchCodeName[204:220],
	_SwitchCodeName[220:234],
	_SwitchCodeName[234:249],
	_SwitchCodeName[249:265],
	_SwitchCodeName[265:278],
	_SwitchCodeName[278:284],
}

// SwitchCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SwitchCodeString(s string) (SwitchCode, error) {
	if val, ok := _SwitchCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SwitchCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SwitchCode values", s)
}

// SwitchCodeValues returns all values of the enum
func SwitchCodeValues() []SwitchCode {
	return _SwitchCodeValues
}

// SwitchCodeStrings returns a slice of all String values of the enum
func SwitchCodeStrings() []string {
	strs := make([]string, len(_SwitchCodeNames))
	copy(strs, _SwitchCodeNames)
	return strs
}

// IsASwitchCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SwitchCode) IsASwitchCode() bool {
	for _, v := range _SwitchCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
