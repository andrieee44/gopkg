// Code generated by "enumer -type=FFStatusCode"; DO NOT EDIT.

package input

import (
	"fmt"
	"strings"
)

const _FFStatusCodeName = "FF_STATUS_STOPPEDFF_STATUS_PLAYING"

var _FFStatusCodeIndex = [...]uint8{0, 17, 34}

const _FFStatusCodeLowerName = "ff_status_stoppedff_status_playing"

func (i FFStatusCode) String() string {
	if i >= FFStatusCode(len(_FFStatusCodeIndex)-1) {
		return fmt.Sprintf("FFStatusCode(%d)", i)
	}
	return _FFStatusCodeName[_FFStatusCodeIndex[i]:_FFStatusCodeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FFStatusCodeNoOp() {
	var x [1]struct{}
	_ = x[FF_STATUS_STOPPED-(0)]
	_ = x[FF_STATUS_PLAYING-(1)]
}

var _FFStatusCodeValues = []FFStatusCode{FF_STATUS_STOPPED, FF_STATUS_PLAYING}

var _FFStatusCodeNameToValueMap = map[string]FFStatusCode{
	_FFStatusCodeName[0:17]:       FF_STATUS_STOPPED,
	_FFStatusCodeLowerName[0:17]:  FF_STATUS_STOPPED,
	_FFStatusCodeName[17:34]:      FF_STATUS_PLAYING,
	_FFStatusCodeLowerName[17:34]: FF_STATUS_PLAYING,
}

var _FFStatusCodeNames = []string{
	_FFStatusCodeName[0:17],
	_FFStatusCodeName[17:34],
}

// FFStatusCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FFStatusCodeString(s string) (FFStatusCode, error) {
	if val, ok := _FFStatusCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FFStatusCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FFStatusCode values", s)
}

// FFStatusCodeValues returns all values of the enum
func FFStatusCodeValues() []FFStatusCode {
	return _FFStatusCodeValues
}

// FFStatusCodeStrings returns a slice of all String values of the enum
func FFStatusCodeStrings() []string {
	strs := make([]string, len(_FFStatusCodeNames))
	copy(strs, _FFStatusCodeNames)
	return strs
}

// IsAFFStatusCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FFStatusCode) IsAFFStatusCode() bool {
	for _, v := range _FFStatusCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
