// Code generated by "enumer -type=InputSwitchCode"; DO NOT EDIT.

package input

import (
	"fmt"
	"strings"
)

const _InputSwitchCodeName = "SW_LIDSW_TABLET_MODESW_HEADPHONE_INSERTSW_RFKILL_ALLSW_MICROPHONE_INSERTSW_DOCKSW_LINEOUT_INSERTSW_JACK_PHYSICAL_INSERTSW_VIDEOOUT_INSERTSW_CAMERA_LENS_COVERSW_KEYPAD_SLIDESW_FRONT_PROXIMITYSW_ROTATE_LOCKSW_LINEIN_INSERTSW_MUTE_DEVICESW_PEN_INSERTEDSW_MACHINE_COVERSW_USB_INSERTSW_CNT"

var _InputSwitchCodeIndex = [...]uint16{0, 6, 20, 39, 52, 72, 79, 96, 119, 137, 157, 172, 190, 204, 220, 234, 249, 265, 278, 284}

const _InputSwitchCodeLowerName = "sw_lidsw_tablet_modesw_headphone_insertsw_rfkill_allsw_microphone_insertsw_docksw_lineout_insertsw_jack_physical_insertsw_videoout_insertsw_camera_lens_coversw_keypad_slidesw_front_proximitysw_rotate_locksw_linein_insertsw_mute_devicesw_pen_insertedsw_machine_coversw_usb_insertsw_cnt"

func (i InputSwitchCode) String() string {
	if i >= InputSwitchCode(len(_InputSwitchCodeIndex)-1) {
		return fmt.Sprintf("InputSwitchCode(%d)", i)
	}
	return _InputSwitchCodeName[_InputSwitchCodeIndex[i]:_InputSwitchCodeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _InputSwitchCodeNoOp() {
	var x [1]struct{}
	_ = x[SW_LID-(0)]
	_ = x[SW_TABLET_MODE-(1)]
	_ = x[SW_HEADPHONE_INSERT-(2)]
	_ = x[SW_RFKILL_ALL-(3)]
	_ = x[SW_MICROPHONE_INSERT-(4)]
	_ = x[SW_DOCK-(5)]
	_ = x[SW_LINEOUT_INSERT-(6)]
	_ = x[SW_JACK_PHYSICAL_INSERT-(7)]
	_ = x[SW_VIDEOOUT_INSERT-(8)]
	_ = x[SW_CAMERA_LENS_COVER-(9)]
	_ = x[SW_KEYPAD_SLIDE-(10)]
	_ = x[SW_FRONT_PROXIMITY-(11)]
	_ = x[SW_ROTATE_LOCK-(12)]
	_ = x[SW_LINEIN_INSERT-(13)]
	_ = x[SW_MUTE_DEVICE-(14)]
	_ = x[SW_PEN_INSERTED-(15)]
	_ = x[SW_MACHINE_COVER-(16)]
	_ = x[SW_USB_INSERT-(17)]
	_ = x[SW_CNT-(18)]
}

var _InputSwitchCodeValues = []InputSwitchCode{SW_LID, SW_TABLET_MODE, SW_HEADPHONE_INSERT, SW_RFKILL_ALL, SW_MICROPHONE_INSERT, SW_DOCK, SW_LINEOUT_INSERT, SW_JACK_PHYSICAL_INSERT, SW_VIDEOOUT_INSERT, SW_CAMERA_LENS_COVER, SW_KEYPAD_SLIDE, SW_FRONT_PROXIMITY, SW_ROTATE_LOCK, SW_LINEIN_INSERT, SW_MUTE_DEVICE, SW_PEN_INSERTED, SW_MACHINE_COVER, SW_USB_INSERT, SW_CNT}

var _InputSwitchCodeNameToValueMap = map[string]InputSwitchCode{
	_InputSwitchCodeName[0:6]:          SW_LID,
	_InputSwitchCodeLowerName[0:6]:     SW_LID,
	_InputSwitchCodeName[6:20]:         SW_TABLET_MODE,
	_InputSwitchCodeLowerName[6:20]:    SW_TABLET_MODE,
	_InputSwitchCodeName[20:39]:        SW_HEADPHONE_INSERT,
	_InputSwitchCodeLowerName[20:39]:   SW_HEADPHONE_INSERT,
	_InputSwitchCodeName[39:52]:        SW_RFKILL_ALL,
	_InputSwitchCodeLowerName[39:52]:   SW_RFKILL_ALL,
	_InputSwitchCodeName[52:72]:        SW_MICROPHONE_INSERT,
	_InputSwitchCodeLowerName[52:72]:   SW_MICROPHONE_INSERT,
	_InputSwitchCodeName[72:79]:        SW_DOCK,
	_InputSwitchCodeLowerName[72:79]:   SW_DOCK,
	_InputSwitchCodeName[79:96]:        SW_LINEOUT_INSERT,
	_InputSwitchCodeLowerName[79:96]:   SW_LINEOUT_INSERT,
	_InputSwitchCodeName[96:119]:       SW_JACK_PHYSICAL_INSERT,
	_InputSwitchCodeLowerName[96:119]:  SW_JACK_PHYSICAL_INSERT,
	_InputSwitchCodeName[119:137]:      SW_VIDEOOUT_INSERT,
	_InputSwitchCodeLowerName[119:137]: SW_VIDEOOUT_INSERT,
	_InputSwitchCodeName[137:157]:      SW_CAMERA_LENS_COVER,
	_InputSwitchCodeLowerName[137:157]: SW_CAMERA_LENS_COVER,
	_InputSwitchCodeName[157:172]:      SW_KEYPAD_SLIDE,
	_InputSwitchCodeLowerName[157:172]: SW_KEYPAD_SLIDE,
	_InputSwitchCodeName[172:190]:      SW_FRONT_PROXIMITY,
	_InputSwitchCodeLowerName[172:190]: SW_FRONT_PROXIMITY,
	_InputSwitchCodeName[190:204]:      SW_ROTATE_LOCK,
	_InputSwitchCodeLowerName[190:204]: SW_ROTATE_LOCK,
	_InputSwitchCodeName[204:220]:      SW_LINEIN_INSERT,
	_InputSwitchCodeLowerName[204:220]: SW_LINEIN_INSERT,
	_InputSwitchCodeName[220:234]:      SW_MUTE_DEVICE,
	_InputSwitchCodeLowerName[220:234]: SW_MUTE_DEVICE,
	_InputSwitchCodeName[234:249]:      SW_PEN_INSERTED,
	_InputSwitchCodeLowerName[234:249]: SW_PEN_INSERTED,
	_InputSwitchCodeName[249:265]:      SW_MACHINE_COVER,
	_InputSwitchCodeLowerName[249:265]: SW_MACHINE_COVER,
	_InputSwitchCodeName[265:278]:      SW_USB_INSERT,
	_InputSwitchCodeLowerName[265:278]: SW_USB_INSERT,
	_InputSwitchCodeName[278:284]:      SW_CNT,
	_InputSwitchCodeLowerName[278:284]: SW_CNT,
}

var _InputSwitchCodeNames = []string{
	_InputSwitchCodeName[0:6],
	_InputSwitchCodeName[6:20],
	_InputSwitchCodeName[20:39],
	_InputSwitchCodeName[39:52],
	_InputSwitchCodeName[52:72],
	_InputSwitchCodeName[72:79],
	_InputSwitchCodeName[79:96],
	_InputSwitchCodeName[96:119],
	_InputSwitchCodeName[119:137],
	_InputSwitchCodeName[137:157],
	_InputSwitchCodeName[157:172],
	_InputSwitchCodeName[172:190],
	_InputSwitchCodeName[190:204],
	_InputSwitchCodeName[204:220],
	_InputSwitchCodeName[220:234],
	_InputSwitchCodeName[234:249],
	_InputSwitchCodeName[249:265],
	_InputSwitchCodeName[265:278],
	_InputSwitchCodeName[278:284],
}

// InputSwitchCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func InputSwitchCodeString(s string) (InputSwitchCode, error) {
	if val, ok := _InputSwitchCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _InputSwitchCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to InputSwitchCode values", s)
}

// InputSwitchCodeValues returns all values of the enum
func InputSwitchCodeValues() []InputSwitchCode {
	return _InputSwitchCodeValues
}

// InputSwitchCodeStrings returns a slice of all String values of the enum
func InputSwitchCodeStrings() []string {
	strs := make([]string, len(_InputSwitchCodeNames))
	copy(strs, _InputSwitchCodeNames)
	return strs
}

// IsAInputSwitchCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i InputSwitchCode) IsAInputSwitchCode() bool {
	for _, v := range _InputSwitchCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
