// Code generated by "enumer -type=FFCode"; DO NOT EDIT.

package input

import (
	"fmt"
	"strings"
)

const (
	_FFCodeName_0      = "FF_RUMBLEFF_PERIODICFF_CONSTANTFF_SPRINGFF_FRICTIONFF_DAMPERFF_INERTIAFF_RAMPFF_SQUAREFF_TRIANGLEFF_SINEFF_SAW_UPFF_SAW_DOWNFF_CUSTOM"
	_FFCodeLowerName_0 = "ff_rumbleff_periodicff_constantff_springff_frictionff_damperff_inertiaff_rampff_squareff_triangleff_sineff_saw_upff_saw_downff_custom"
	_FFCodeName_1      = "FF_GAINFF_AUTOCENTER"
	_FFCodeLowerName_1 = "ff_gainff_autocenter"
	_FFCodeName_2      = "FF_MAXFF_CNT"
	_FFCodeLowerName_2 = "ff_maxff_cnt"
)

var (
	_FFCodeIndex_0 = [...]uint8{0, 9, 20, 31, 40, 51, 60, 70, 77, 86, 97, 104, 113, 124, 133}
	_FFCodeIndex_1 = [...]uint8{0, 7, 20}
	_FFCodeIndex_2 = [...]uint8{0, 6, 12}
)

func (i FFCode) String() string {
	switch {
	case 80 <= i && i <= 93:
		i -= 80
		return _FFCodeName_0[_FFCodeIndex_0[i]:_FFCodeIndex_0[i+1]]
	case 96 <= i && i <= 97:
		i -= 96
		return _FFCodeName_1[_FFCodeIndex_1[i]:_FFCodeIndex_1[i+1]]
	case 127 <= i && i <= 128:
		i -= 127
		return _FFCodeName_2[_FFCodeIndex_2[i]:_FFCodeIndex_2[i+1]]
	default:
		return fmt.Sprintf("FFCode(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FFCodeNoOp() {
	var x [1]struct{}
	_ = x[FF_RUMBLE-(80)]
	_ = x[FF_PERIODIC-(81)]
	_ = x[FF_CONSTANT-(82)]
	_ = x[FF_SPRING-(83)]
	_ = x[FF_FRICTION-(84)]
	_ = x[FF_DAMPER-(85)]
	_ = x[FF_INERTIA-(86)]
	_ = x[FF_RAMP-(87)]
	_ = x[FF_SQUARE-(88)]
	_ = x[FF_TRIANGLE-(89)]
	_ = x[FF_SINE-(90)]
	_ = x[FF_SAW_UP-(91)]
	_ = x[FF_SAW_DOWN-(92)]
	_ = x[FF_CUSTOM-(93)]
	_ = x[FF_GAIN-(96)]
	_ = x[FF_AUTOCENTER-(97)]
	_ = x[FF_MAX-(127)]
	_ = x[FF_CNT-(128)]
}

var _FFCodeValues = []FFCode{FF_RUMBLE, FF_PERIODIC, FF_CONSTANT, FF_SPRING, FF_FRICTION, FF_DAMPER, FF_INERTIA, FF_RAMP, FF_SQUARE, FF_TRIANGLE, FF_SINE, FF_SAW_UP, FF_SAW_DOWN, FF_CUSTOM, FF_GAIN, FF_AUTOCENTER, FF_MAX, FF_CNT}

var _FFCodeNameToValueMap = map[string]FFCode{
	_FFCodeName_0[0:9]:          FF_RUMBLE,
	_FFCodeLowerName_0[0:9]:     FF_RUMBLE,
	_FFCodeName_0[9:20]:         FF_PERIODIC,
	_FFCodeLowerName_0[9:20]:    FF_PERIODIC,
	_FFCodeName_0[20:31]:        FF_CONSTANT,
	_FFCodeLowerName_0[20:31]:   FF_CONSTANT,
	_FFCodeName_0[31:40]:        FF_SPRING,
	_FFCodeLowerName_0[31:40]:   FF_SPRING,
	_FFCodeName_0[40:51]:        FF_FRICTION,
	_FFCodeLowerName_0[40:51]:   FF_FRICTION,
	_FFCodeName_0[51:60]:        FF_DAMPER,
	_FFCodeLowerName_0[51:60]:   FF_DAMPER,
	_FFCodeName_0[60:70]:        FF_INERTIA,
	_FFCodeLowerName_0[60:70]:   FF_INERTIA,
	_FFCodeName_0[70:77]:        FF_RAMP,
	_FFCodeLowerName_0[70:77]:   FF_RAMP,
	_FFCodeName_0[77:86]:        FF_SQUARE,
	_FFCodeLowerName_0[77:86]:   FF_SQUARE,
	_FFCodeName_0[86:97]:        FF_TRIANGLE,
	_FFCodeLowerName_0[86:97]:   FF_TRIANGLE,
	_FFCodeName_0[97:104]:       FF_SINE,
	_FFCodeLowerName_0[97:104]:  FF_SINE,
	_FFCodeName_0[104:113]:      FF_SAW_UP,
	_FFCodeLowerName_0[104:113]: FF_SAW_UP,
	_FFCodeName_0[113:124]:      FF_SAW_DOWN,
	_FFCodeLowerName_0[113:124]: FF_SAW_DOWN,
	_FFCodeName_0[124:133]:      FF_CUSTOM,
	_FFCodeLowerName_0[124:133]: FF_CUSTOM,
	_FFCodeName_1[0:7]:          FF_GAIN,
	_FFCodeLowerName_1[0:7]:     FF_GAIN,
	_FFCodeName_1[7:20]:         FF_AUTOCENTER,
	_FFCodeLowerName_1[7:20]:    FF_AUTOCENTER,
	_FFCodeName_2[0:6]:          FF_MAX,
	_FFCodeLowerName_2[0:6]:     FF_MAX,
	_FFCodeName_2[6:12]:         FF_CNT,
	_FFCodeLowerName_2[6:12]:    FF_CNT,
}

var _FFCodeNames = []string{
	_FFCodeName_0[0:9],
	_FFCodeName_0[9:20],
	_FFCodeName_0[20:31],
	_FFCodeName_0[31:40],
	_FFCodeName_0[40:51],
	_FFCodeName_0[51:60],
	_FFCodeName_0[60:70],
	_FFCodeName_0[70:77],
	_FFCodeName_0[77:86],
	_FFCodeName_0[86:97],
	_FFCodeName_0[97:104],
	_FFCodeName_0[104:113],
	_FFCodeName_0[113:124],
	_FFCodeName_0[124:133],
	_FFCodeName_1[0:7],
	_FFCodeName_1[7:20],
	_FFCodeName_2[0:6],
	_FFCodeName_2[6:12],
}

// FFCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FFCodeString(s string) (FFCode, error) {
	if val, ok := _FFCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FFCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FFCode values", s)
}

// FFCodeValues returns all values of the enum
func FFCodeValues() []FFCode {
	return _FFCodeValues
}

// FFCodeStrings returns a slice of all String values of the enum
func FFCodeStrings() []string {
	strs := make([]string, len(_FFCodeNames))
	copy(strs, _FFCodeNames)
	return strs
}

// IsAFFCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FFCode) IsAFFCode() bool {
	for _, v := range _FFCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
