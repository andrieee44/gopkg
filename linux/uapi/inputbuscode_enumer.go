// Code generated by "enumer -type=InputBusCode"; DO NOT EDIT.

package uapi

import (
	"fmt"
	"strings"
)

const (
	_InputBusCodeName_0      = "BUS_PCIBUS_ISAPNPBUS_USBBUS_HILBUS_BLUETOOTHBUS_VIRTUAL"
	_InputBusCodeLowerName_0 = "bus_pcibus_isapnpbus_usbbus_hilbus_bluetoothbus_virtual"
	_InputBusCodeName_1      = "BUS_ISABUS_I8042BUS_XTKBDBUS_RS232BUS_GAMEPORTBUS_PARPORTBUS_AMIGABUS_ADBBUS_I2CBUS_HOSTBUS_GSCBUS_ATARIBUS_SPIBUS_RMIBUS_CECBUS_INTEL_ISHTPBUS_AMD_SFH"
	_InputBusCodeLowerName_1 = "bus_isabus_i8042bus_xtkbdbus_rs232bus_gameportbus_parportbus_amigabus_adbbus_i2cbus_hostbus_gscbus_ataribus_spibus_rmibus_cecbus_intel_ishtpbus_amd_sfh"
)

var (
	_InputBusCodeIndex_0 = [...]uint8{0, 7, 17, 24, 31, 44, 55}
	_InputBusCodeIndex_1 = [...]uint8{0, 7, 16, 25, 34, 46, 57, 66, 73, 80, 88, 95, 104, 111, 118, 125, 140, 151}
)

func (i InputBusCode) String() string {
	switch {
	case 1 <= i && i <= 6:
		i -= 1
		return _InputBusCodeName_0[_InputBusCodeIndex_0[i]:_InputBusCodeIndex_0[i+1]]
	case 16 <= i && i <= 32:
		i -= 16
		return _InputBusCodeName_1[_InputBusCodeIndex_1[i]:_InputBusCodeIndex_1[i+1]]
	default:
		return fmt.Sprintf("InputBusCode(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _InputBusCodeNoOp() {
	var x [1]struct{}
	_ = x[BUS_PCI-(1)]
	_ = x[BUS_ISAPNP-(2)]
	_ = x[BUS_USB-(3)]
	_ = x[BUS_HIL-(4)]
	_ = x[BUS_BLUETOOTH-(5)]
	_ = x[BUS_VIRTUAL-(6)]
	_ = x[BUS_ISA-(16)]
	_ = x[BUS_I8042-(17)]
	_ = x[BUS_XTKBD-(18)]
	_ = x[BUS_RS232-(19)]
	_ = x[BUS_GAMEPORT-(20)]
	_ = x[BUS_PARPORT-(21)]
	_ = x[BUS_AMIGA-(22)]
	_ = x[BUS_ADB-(23)]
	_ = x[BUS_I2C-(24)]
	_ = x[BUS_HOST-(25)]
	_ = x[BUS_GSC-(26)]
	_ = x[BUS_ATARI-(27)]
	_ = x[BUS_SPI-(28)]
	_ = x[BUS_RMI-(29)]
	_ = x[BUS_CEC-(30)]
	_ = x[BUS_INTEL_ISHTP-(31)]
	_ = x[BUS_AMD_SFH-(32)]
}

var _InputBusCodeValues = []InputBusCode{BUS_PCI, BUS_ISAPNP, BUS_USB, BUS_HIL, BUS_BLUETOOTH, BUS_VIRTUAL, BUS_ISA, BUS_I8042, BUS_XTKBD, BUS_RS232, BUS_GAMEPORT, BUS_PARPORT, BUS_AMIGA, BUS_ADB, BUS_I2C, BUS_HOST, BUS_GSC, BUS_ATARI, BUS_SPI, BUS_RMI, BUS_CEC, BUS_INTEL_ISHTP, BUS_AMD_SFH}

var _InputBusCodeNameToValueMap = map[string]InputBusCode{
	_InputBusCodeName_0[0:7]:          BUS_PCI,
	_InputBusCodeLowerName_0[0:7]:     BUS_PCI,
	_InputBusCodeName_0[7:17]:         BUS_ISAPNP,
	_InputBusCodeLowerName_0[7:17]:    BUS_ISAPNP,
	_InputBusCodeName_0[17:24]:        BUS_USB,
	_InputBusCodeLowerName_0[17:24]:   BUS_USB,
	_InputBusCodeName_0[24:31]:        BUS_HIL,
	_InputBusCodeLowerName_0[24:31]:   BUS_HIL,
	_InputBusCodeName_0[31:44]:        BUS_BLUETOOTH,
	_InputBusCodeLowerName_0[31:44]:   BUS_BLUETOOTH,
	_InputBusCodeName_0[44:55]:        BUS_VIRTUAL,
	_InputBusCodeLowerName_0[44:55]:   BUS_VIRTUAL,
	_InputBusCodeName_1[0:7]:          BUS_ISA,
	_InputBusCodeLowerName_1[0:7]:     BUS_ISA,
	_InputBusCodeName_1[7:16]:         BUS_I8042,
	_InputBusCodeLowerName_1[7:16]:    BUS_I8042,
	_InputBusCodeName_1[16:25]:        BUS_XTKBD,
	_InputBusCodeLowerName_1[16:25]:   BUS_XTKBD,
	_InputBusCodeName_1[25:34]:        BUS_RS232,
	_InputBusCodeLowerName_1[25:34]:   BUS_RS232,
	_InputBusCodeName_1[34:46]:        BUS_GAMEPORT,
	_InputBusCodeLowerName_1[34:46]:   BUS_GAMEPORT,
	_InputBusCodeName_1[46:57]:        BUS_PARPORT,
	_InputBusCodeLowerName_1[46:57]:   BUS_PARPORT,
	_InputBusCodeName_1[57:66]:        BUS_AMIGA,
	_InputBusCodeLowerName_1[57:66]:   BUS_AMIGA,
	_InputBusCodeName_1[66:73]:        BUS_ADB,
	_InputBusCodeLowerName_1[66:73]:   BUS_ADB,
	_InputBusCodeName_1[73:80]:        BUS_I2C,
	_InputBusCodeLowerName_1[73:80]:   BUS_I2C,
	_InputBusCodeName_1[80:88]:        BUS_HOST,
	_InputBusCodeLowerName_1[80:88]:   BUS_HOST,
	_InputBusCodeName_1[88:95]:        BUS_GSC,
	_InputBusCodeLowerName_1[88:95]:   BUS_GSC,
	_InputBusCodeName_1[95:104]:       BUS_ATARI,
	_InputBusCodeLowerName_1[95:104]:  BUS_ATARI,
	_InputBusCodeName_1[104:111]:      BUS_SPI,
	_InputBusCodeLowerName_1[104:111]: BUS_SPI,
	_InputBusCodeName_1[111:118]:      BUS_RMI,
	_InputBusCodeLowerName_1[111:118]: BUS_RMI,
	_InputBusCodeName_1[118:125]:      BUS_CEC,
	_InputBusCodeLowerName_1[118:125]: BUS_CEC,
	_InputBusCodeName_1[125:140]:      BUS_INTEL_ISHTP,
	_InputBusCodeLowerName_1[125:140]: BUS_INTEL_ISHTP,
	_InputBusCodeName_1[140:151]:      BUS_AMD_SFH,
	_InputBusCodeLowerName_1[140:151]: BUS_AMD_SFH,
}

var _InputBusCodeNames = []string{
	_InputBusCodeName_0[0:7],
	_InputBusCodeName_0[7:17],
	_InputBusCodeName_0[17:24],
	_InputBusCodeName_0[24:31],
	_InputBusCodeName_0[31:44],
	_InputBusCodeName_0[44:55],
	_InputBusCodeName_1[0:7],
	_InputBusCodeName_1[7:16],
	_InputBusCodeName_1[16:25],
	_InputBusCodeName_1[25:34],
	_InputBusCodeName_1[34:46],
	_InputBusCodeName_1[46:57],
	_InputBusCodeName_1[57:66],
	_InputBusCodeName_1[66:73],
	_InputBusCodeName_1[73:80],
	_InputBusCodeName_1[80:88],
	_InputBusCodeName_1[88:95],
	_InputBusCodeName_1[95:104],
	_InputBusCodeName_1[104:111],
	_InputBusCodeName_1[111:118],
	_InputBusCodeName_1[118:125],
	_InputBusCodeName_1[125:140],
	_InputBusCodeName_1[140:151],
}

// InputBusCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func InputBusCodeString(s string) (InputBusCode, error) {
	if val, ok := _InputBusCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _InputBusCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to InputBusCode values", s)
}

// InputBusCodeValues returns all values of the enum
func InputBusCodeValues() []InputBusCode {
	return _InputBusCodeValues
}

// InputBusCodeStrings returns a slice of all String values of the enum
func InputBusCodeStrings() []string {
	strs := make([]string, len(_InputBusCodeNames))
	copy(strs, _InputBusCodeNames)
	return strs
}

// IsAInputBusCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i InputBusCode) IsAInputBusCode() bool {
	for _, v := range _InputBusCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
