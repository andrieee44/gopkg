// Code generated by "enumer -type=InputSyncCode"; DO NOT EDIT.

package uapi

import (
	"fmt"
	"strings"
)

const (
	_InputSyncCodeName_0      = "SYN_REPORTSYN_CONFIGSYN_MT_REPORTSYN_DROPPED"
	_InputSyncCodeLowerName_0 = "syn_reportsyn_configsyn_mt_reportsyn_dropped"
	_InputSyncCodeName_1      = "SYN_MAXSYN_CNT"
	_InputSyncCodeLowerName_1 = "syn_maxsyn_cnt"
)

var (
	_InputSyncCodeIndex_0 = [...]uint8{0, 10, 20, 33, 44}
	_InputSyncCodeIndex_1 = [...]uint8{0, 7, 14}
)

func (i InputSyncCode) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _InputSyncCodeName_0[_InputSyncCodeIndex_0[i]:_InputSyncCodeIndex_0[i+1]]
	case 15 <= i && i <= 16:
		i -= 15
		return _InputSyncCodeName_1[_InputSyncCodeIndex_1[i]:_InputSyncCodeIndex_1[i+1]]
	default:
		return fmt.Sprintf("InputSyncCode(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _InputSyncCodeNoOp() {
	var x [1]struct{}
	_ = x[SYN_REPORT-(0)]
	_ = x[SYN_CONFIG-(1)]
	_ = x[SYN_MT_REPORT-(2)]
	_ = x[SYN_DROPPED-(3)]
	_ = x[SYN_MAX-(15)]
	_ = x[SYN_CNT-(16)]
}

var _InputSyncCodeValues = []InputSyncCode{SYN_REPORT, SYN_CONFIG, SYN_MT_REPORT, SYN_DROPPED, SYN_MAX, SYN_CNT}

var _InputSyncCodeNameToValueMap = map[string]InputSyncCode{
	_InputSyncCodeName_0[0:10]:       SYN_REPORT,
	_InputSyncCodeLowerName_0[0:10]:  SYN_REPORT,
	_InputSyncCodeName_0[10:20]:      SYN_CONFIG,
	_InputSyncCodeLowerName_0[10:20]: SYN_CONFIG,
	_InputSyncCodeName_0[20:33]:      SYN_MT_REPORT,
	_InputSyncCodeLowerName_0[20:33]: SYN_MT_REPORT,
	_InputSyncCodeName_0[33:44]:      SYN_DROPPED,
	_InputSyncCodeLowerName_0[33:44]: SYN_DROPPED,
	_InputSyncCodeName_1[0:7]:        SYN_MAX,
	_InputSyncCodeLowerName_1[0:7]:   SYN_MAX,
	_InputSyncCodeName_1[7:14]:       SYN_CNT,
	_InputSyncCodeLowerName_1[7:14]:  SYN_CNT,
}

var _InputSyncCodeNames = []string{
	_InputSyncCodeName_0[0:10],
	_InputSyncCodeName_0[10:20],
	_InputSyncCodeName_0[20:33],
	_InputSyncCodeName_0[33:44],
	_InputSyncCodeName_1[0:7],
	_InputSyncCodeName_1[7:14],
}

// InputSyncCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func InputSyncCodeString(s string) (InputSyncCode, error) {
	if val, ok := _InputSyncCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _InputSyncCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to InputSyncCode values", s)
}

// InputSyncCodeValues returns all values of the enum
func InputSyncCodeValues() []InputSyncCode {
	return _InputSyncCodeValues
}

// InputSyncCodeStrings returns a slice of all String values of the enum
func InputSyncCodeStrings() []string {
	strs := make([]string, len(_InputSyncCodeNames))
	copy(strs, _InputSyncCodeNames)
	return strs
}

// IsAInputSyncCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i InputSyncCode) IsAInputSyncCode() bool {
	for _, v := range _InputSyncCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
