// Code generated by "enumer -type=InputEventCode"; DO NOT EDIT.

package uapi

import (
	"fmt"
	"strings"
)

const (
	_InputEventCodeName_0      = "EV_SYNEV_KEYEV_RELEV_ABSEV_MSCEV_SW"
	_InputEventCodeLowerName_0 = "ev_synev_keyev_relev_absev_mscev_sw"
	_InputEventCodeName_1      = "EV_LEDEV_SND"
	_InputEventCodeLowerName_1 = "ev_ledev_snd"
	_InputEventCodeName_2      = "EV_REPEV_FFEV_PWREV_FF_STATUS"
	_InputEventCodeLowerName_2 = "ev_repev_ffev_pwrev_ff_status"
	_InputEventCodeName_3      = "EV_MAXEV_CNT"
	_InputEventCodeLowerName_3 = "ev_maxev_cnt"
)

var (
	_InputEventCodeIndex_0 = [...]uint8{0, 6, 12, 18, 24, 30, 35}
	_InputEventCodeIndex_1 = [...]uint8{0, 6, 12}
	_InputEventCodeIndex_2 = [...]uint8{0, 6, 11, 17, 29}
	_InputEventCodeIndex_3 = [...]uint8{0, 6, 12}
)

func (i InputEventCode) String() string {
	switch {
	case 0 <= i && i <= 5:
		return _InputEventCodeName_0[_InputEventCodeIndex_0[i]:_InputEventCodeIndex_0[i+1]]
	case 17 <= i && i <= 18:
		i -= 17
		return _InputEventCodeName_1[_InputEventCodeIndex_1[i]:_InputEventCodeIndex_1[i+1]]
	case 20 <= i && i <= 23:
		i -= 20
		return _InputEventCodeName_2[_InputEventCodeIndex_2[i]:_InputEventCodeIndex_2[i+1]]
	case 31 <= i && i <= 32:
		i -= 31
		return _InputEventCodeName_3[_InputEventCodeIndex_3[i]:_InputEventCodeIndex_3[i+1]]
	default:
		return fmt.Sprintf("InputEventCode(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _InputEventCodeNoOp() {
	var x [1]struct{}
	_ = x[EV_SYN-(0)]
	_ = x[EV_KEY-(1)]
	_ = x[EV_REL-(2)]
	_ = x[EV_ABS-(3)]
	_ = x[EV_MSC-(4)]
	_ = x[EV_SW-(5)]
	_ = x[EV_LED-(17)]
	_ = x[EV_SND-(18)]
	_ = x[EV_REP-(20)]
	_ = x[EV_FF-(21)]
	_ = x[EV_PWR-(22)]
	_ = x[EV_FF_STATUS-(23)]
	_ = x[EV_MAX-(31)]
	_ = x[EV_CNT-(32)]
}

var _InputEventCodeValues = []InputEventCode{EV_SYN, EV_KEY, EV_REL, EV_ABS, EV_MSC, EV_SW, EV_LED, EV_SND, EV_REP, EV_FF, EV_PWR, EV_FF_STATUS, EV_MAX, EV_CNT}

var _InputEventCodeNameToValueMap = map[string]InputEventCode{
	_InputEventCodeName_0[0:6]:        EV_SYN,
	_InputEventCodeLowerName_0[0:6]:   EV_SYN,
	_InputEventCodeName_0[6:12]:       EV_KEY,
	_InputEventCodeLowerName_0[6:12]:  EV_KEY,
	_InputEventCodeName_0[12:18]:      EV_REL,
	_InputEventCodeLowerName_0[12:18]: EV_REL,
	_InputEventCodeName_0[18:24]:      EV_ABS,
	_InputEventCodeLowerName_0[18:24]: EV_ABS,
	_InputEventCodeName_0[24:30]:      EV_MSC,
	_InputEventCodeLowerName_0[24:30]: EV_MSC,
	_InputEventCodeName_0[30:35]:      EV_SW,
	_InputEventCodeLowerName_0[30:35]: EV_SW,
	_InputEventCodeName_1[0:6]:        EV_LED,
	_InputEventCodeLowerName_1[0:6]:   EV_LED,
	_InputEventCodeName_1[6:12]:       EV_SND,
	_InputEventCodeLowerName_1[6:12]:  EV_SND,
	_InputEventCodeName_2[0:6]:        EV_REP,
	_InputEventCodeLowerName_2[0:6]:   EV_REP,
	_InputEventCodeName_2[6:11]:       EV_FF,
	_InputEventCodeLowerName_2[6:11]:  EV_FF,
	_InputEventCodeName_2[11:17]:      EV_PWR,
	_InputEventCodeLowerName_2[11:17]: EV_PWR,
	_InputEventCodeName_2[17:29]:      EV_FF_STATUS,
	_InputEventCodeLowerName_2[17:29]: EV_FF_STATUS,
	_InputEventCodeName_3[0:6]:        EV_MAX,
	_InputEventCodeLowerName_3[0:6]:   EV_MAX,
	_InputEventCodeName_3[6:12]:       EV_CNT,
	_InputEventCodeLowerName_3[6:12]:  EV_CNT,
}

var _InputEventCodeNames = []string{
	_InputEventCodeName_0[0:6],
	_InputEventCodeName_0[6:12],
	_InputEventCodeName_0[12:18],
	_InputEventCodeName_0[18:24],
	_InputEventCodeName_0[24:30],
	_InputEventCodeName_0[30:35],
	_InputEventCodeName_1[0:6],
	_InputEventCodeName_1[6:12],
	_InputEventCodeName_2[0:6],
	_InputEventCodeName_2[6:11],
	_InputEventCodeName_2[11:17],
	_InputEventCodeName_2[17:29],
	_InputEventCodeName_3[0:6],
	_InputEventCodeName_3[6:12],
}

// InputEventCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func InputEventCodeString(s string) (InputEventCode, error) {
	if val, ok := _InputEventCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _InputEventCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to InputEventCode values", s)
}

// InputEventCodeValues returns all values of the enum
func InputEventCodeValues() []InputEventCode {
	return _InputEventCodeValues
}

// InputEventCodeStrings returns a slice of all String values of the enum
func InputEventCodeStrings() []string {
	strs := make([]string, len(_InputEventCodeNames))
	copy(strs, _InputEventCodeNames)
	return strs
}

// IsAInputEventCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i InputEventCode) IsAInputEventCode() bool {
	for _, v := range _InputEventCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
