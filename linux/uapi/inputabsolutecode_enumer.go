// Code generated by "enumer -type=InputAbsoluteCode"; DO NOT EDIT.

package uapi

import (
	"fmt"
	"strings"
)

const (
	_InputAbsoluteCodeName_0      = "ABS_XABS_YABS_ZABS_RXABS_RYABS_RZABS_THROTTLEABS_RUDDERABS_WHEELABS_GASABS_BRAKE"
	_InputAbsoluteCodeLowerName_0 = "abs_xabs_yabs_zabs_rxabs_ryabs_rzabs_throttleabs_rudderabs_wheelabs_gasabs_brake"
	_InputAbsoluteCodeName_1      = "ABS_HAT0XABS_HAT0YABS_HAT1XABS_HAT1YABS_HAT2XABS_HAT2YABS_HAT3XABS_HAT3YABS_PRESSUREABS_DISTANCEABS_TILT_XABS_TILT_YABS_TOOL_WIDTH"
	_InputAbsoluteCodeLowerName_1 = "abs_hat0xabs_hat0yabs_hat1xabs_hat1yabs_hat2xabs_hat2yabs_hat3xabs_hat3yabs_pressureabs_distanceabs_tilt_xabs_tilt_yabs_tool_width"
	_InputAbsoluteCodeName_2      = "ABS_VOLUMEABS_PROFILE"
	_InputAbsoluteCodeLowerName_2 = "abs_volumeabs_profile"
	_InputAbsoluteCodeName_3      = "ABS_MISC"
	_InputAbsoluteCodeLowerName_3 = "abs_misc"
	_InputAbsoluteCodeName_4      = "ABS_RESERVEDABS_MT_SLOTABS_MT_TOUCH_MAJORABS_MT_TOUCH_MINORABS_MT_WIDTH_MAJORABS_MT_WIDTH_MINORABS_MT_ORIENTATIONABS_MT_POSITION_XABS_MT_POSITION_YABS_MT_TOOL_TYPEABS_MT_BLOB_IDABS_MT_TRACKING_IDABS_MT_PRESSUREABS_MT_DISTANCEABS_MT_TOOL_XABS_MT_TOOL_Y"
	_InputAbsoluteCodeLowerName_4 = "abs_reservedabs_mt_slotabs_mt_touch_majorabs_mt_touch_minorabs_mt_width_majorabs_mt_width_minorabs_mt_orientationabs_mt_position_xabs_mt_position_yabs_mt_tool_typeabs_mt_blob_idabs_mt_tracking_idabs_mt_pressureabs_mt_distanceabs_mt_tool_xabs_mt_tool_y"
	_InputAbsoluteCodeName_5      = "ABS_MAXABS_CNT"
	_InputAbsoluteCodeLowerName_5 = "abs_maxabs_cnt"
)

var (
	_InputAbsoluteCodeIndex_0 = [...]uint8{0, 5, 10, 15, 21, 27, 33, 45, 55, 64, 71, 80}
	_InputAbsoluteCodeIndex_1 = [...]uint8{0, 9, 18, 27, 36, 45, 54, 63, 72, 84, 96, 106, 116, 130}
	_InputAbsoluteCodeIndex_2 = [...]uint8{0, 10, 21}
	_InputAbsoluteCodeIndex_3 = [...]uint8{0, 8}
	_InputAbsoluteCodeIndex_4 = [...]uint8{0, 12, 23, 41, 59, 77, 95, 113, 130, 147, 163, 177, 195, 210, 225, 238, 251}
	_InputAbsoluteCodeIndex_5 = [...]uint8{0, 7, 14}
)

func (i InputAbsoluteCode) String() string {
	switch {
	case 0 <= i && i <= 10:
		return _InputAbsoluteCodeName_0[_InputAbsoluteCodeIndex_0[i]:_InputAbsoluteCodeIndex_0[i+1]]
	case 16 <= i && i <= 28:
		i -= 16
		return _InputAbsoluteCodeName_1[_InputAbsoluteCodeIndex_1[i]:_InputAbsoluteCodeIndex_1[i+1]]
	case 32 <= i && i <= 33:
		i -= 32
		return _InputAbsoluteCodeName_2[_InputAbsoluteCodeIndex_2[i]:_InputAbsoluteCodeIndex_2[i+1]]
	case i == 40:
		return _InputAbsoluteCodeName_3
	case 46 <= i && i <= 61:
		i -= 46
		return _InputAbsoluteCodeName_4[_InputAbsoluteCodeIndex_4[i]:_InputAbsoluteCodeIndex_4[i+1]]
	case 63 <= i && i <= 64:
		i -= 63
		return _InputAbsoluteCodeName_5[_InputAbsoluteCodeIndex_5[i]:_InputAbsoluteCodeIndex_5[i+1]]
	default:
		return fmt.Sprintf("InputAbsoluteCode(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _InputAbsoluteCodeNoOp() {
	var x [1]struct{}
	_ = x[ABS_X-(0)]
	_ = x[ABS_Y-(1)]
	_ = x[ABS_Z-(2)]
	_ = x[ABS_RX-(3)]
	_ = x[ABS_RY-(4)]
	_ = x[ABS_RZ-(5)]
	_ = x[ABS_THROTTLE-(6)]
	_ = x[ABS_RUDDER-(7)]
	_ = x[ABS_WHEEL-(8)]
	_ = x[ABS_GAS-(9)]
	_ = x[ABS_BRAKE-(10)]
	_ = x[ABS_HAT0X-(16)]
	_ = x[ABS_HAT0Y-(17)]
	_ = x[ABS_HAT1X-(18)]
	_ = x[ABS_HAT1Y-(19)]
	_ = x[ABS_HAT2X-(20)]
	_ = x[ABS_HAT2Y-(21)]
	_ = x[ABS_HAT3X-(22)]
	_ = x[ABS_HAT3Y-(23)]
	_ = x[ABS_PRESSURE-(24)]
	_ = x[ABS_DISTANCE-(25)]
	_ = x[ABS_TILT_X-(26)]
	_ = x[ABS_TILT_Y-(27)]
	_ = x[ABS_TOOL_WIDTH-(28)]
	_ = x[ABS_VOLUME-(32)]
	_ = x[ABS_PROFILE-(33)]
	_ = x[ABS_MISC-(40)]
	_ = x[ABS_RESERVED-(46)]
	_ = x[ABS_MT_SLOT-(47)]
	_ = x[ABS_MT_TOUCH_MAJOR-(48)]
	_ = x[ABS_MT_TOUCH_MINOR-(49)]
	_ = x[ABS_MT_WIDTH_MAJOR-(50)]
	_ = x[ABS_MT_WIDTH_MINOR-(51)]
	_ = x[ABS_MT_ORIENTATION-(52)]
	_ = x[ABS_MT_POSITION_X-(53)]
	_ = x[ABS_MT_POSITION_Y-(54)]
	_ = x[ABS_MT_TOOL_TYPE-(55)]
	_ = x[ABS_MT_BLOB_ID-(56)]
	_ = x[ABS_MT_TRACKING_ID-(57)]
	_ = x[ABS_MT_PRESSURE-(58)]
	_ = x[ABS_MT_DISTANCE-(59)]
	_ = x[ABS_MT_TOOL_X-(60)]
	_ = x[ABS_MT_TOOL_Y-(61)]
	_ = x[ABS_MAX-(63)]
	_ = x[ABS_CNT-(64)]
}

var _InputAbsoluteCodeValues = []InputAbsoluteCode{ABS_X, ABS_Y, ABS_Z, ABS_RX, ABS_RY, ABS_RZ, ABS_THROTTLE, ABS_RUDDER, ABS_WHEEL, ABS_GAS, ABS_BRAKE, ABS_HAT0X, ABS_HAT0Y, ABS_HAT1X, ABS_HAT1Y, ABS_HAT2X, ABS_HAT2Y, ABS_HAT3X, ABS_HAT3Y, ABS_PRESSURE, ABS_DISTANCE, ABS_TILT_X, ABS_TILT_Y, ABS_TOOL_WIDTH, ABS_VOLUME, ABS_PROFILE, ABS_MISC, ABS_RESERVED, ABS_MT_SLOT, ABS_MT_TOUCH_MAJOR, ABS_MT_TOUCH_MINOR, ABS_MT_WIDTH_MAJOR, ABS_MT_WIDTH_MINOR, ABS_MT_ORIENTATION, ABS_MT_POSITION_X, ABS_MT_POSITION_Y, ABS_MT_TOOL_TYPE, ABS_MT_BLOB_ID, ABS_MT_TRACKING_ID, ABS_MT_PRESSURE, ABS_MT_DISTANCE, ABS_MT_TOOL_X, ABS_MT_TOOL_Y, ABS_MAX, ABS_CNT}

var _InputAbsoluteCodeNameToValueMap = map[string]InputAbsoluteCode{
	_InputAbsoluteCodeName_0[0:5]:          ABS_X,
	_InputAbsoluteCodeLowerName_0[0:5]:     ABS_X,
	_InputAbsoluteCodeName_0[5:10]:         ABS_Y,
	_InputAbsoluteCodeLowerName_0[5:10]:    ABS_Y,
	_InputAbsoluteCodeName_0[10:15]:        ABS_Z,
	_InputAbsoluteCodeLowerName_0[10:15]:   ABS_Z,
	_InputAbsoluteCodeName_0[15:21]:        ABS_RX,
	_InputAbsoluteCodeLowerName_0[15:21]:   ABS_RX,
	_InputAbsoluteCodeName_0[21:27]:        ABS_RY,
	_InputAbsoluteCodeLowerName_0[21:27]:   ABS_RY,
	_InputAbsoluteCodeName_0[27:33]:        ABS_RZ,
	_InputAbsoluteCodeLowerName_0[27:33]:   ABS_RZ,
	_InputAbsoluteCodeName_0[33:45]:        ABS_THROTTLE,
	_InputAbsoluteCodeLowerName_0[33:45]:   ABS_THROTTLE,
	_InputAbsoluteCodeName_0[45:55]:        ABS_RUDDER,
	_InputAbsoluteCodeLowerName_0[45:55]:   ABS_RUDDER,
	_InputAbsoluteCodeName_0[55:64]:        ABS_WHEEL,
	_InputAbsoluteCodeLowerName_0[55:64]:   ABS_WHEEL,
	_InputAbsoluteCodeName_0[64:71]:        ABS_GAS,
	_InputAbsoluteCodeLowerName_0[64:71]:   ABS_GAS,
	_InputAbsoluteCodeName_0[71:80]:        ABS_BRAKE,
	_InputAbsoluteCodeLowerName_0[71:80]:   ABS_BRAKE,
	_InputAbsoluteCodeName_1[0:9]:          ABS_HAT0X,
	_InputAbsoluteCodeLowerName_1[0:9]:     ABS_HAT0X,
	_InputAbsoluteCodeName_1[9:18]:         ABS_HAT0Y,
	_InputAbsoluteCodeLowerName_1[9:18]:    ABS_HAT0Y,
	_InputAbsoluteCodeName_1[18:27]:        ABS_HAT1X,
	_InputAbsoluteCodeLowerName_1[18:27]:   ABS_HAT1X,
	_InputAbsoluteCodeName_1[27:36]:        ABS_HAT1Y,
	_InputAbsoluteCodeLowerName_1[27:36]:   ABS_HAT1Y,
	_InputAbsoluteCodeName_1[36:45]:        ABS_HAT2X,
	_InputAbsoluteCodeLowerName_1[36:45]:   ABS_HAT2X,
	_InputAbsoluteCodeName_1[45:54]:        ABS_HAT2Y,
	_InputAbsoluteCodeLowerName_1[45:54]:   ABS_HAT2Y,
	_InputAbsoluteCodeName_1[54:63]:        ABS_HAT3X,
	_InputAbsoluteCodeLowerName_1[54:63]:   ABS_HAT3X,
	_InputAbsoluteCodeName_1[63:72]:        ABS_HAT3Y,
	_InputAbsoluteCodeLowerName_1[63:72]:   ABS_HAT3Y,
	_InputAbsoluteCodeName_1[72:84]:        ABS_PRESSURE,
	_InputAbsoluteCodeLowerName_1[72:84]:   ABS_PRESSURE,
	_InputAbsoluteCodeName_1[84:96]:        ABS_DISTANCE,
	_InputAbsoluteCodeLowerName_1[84:96]:   ABS_DISTANCE,
	_InputAbsoluteCodeName_1[96:106]:       ABS_TILT_X,
	_InputAbsoluteCodeLowerName_1[96:106]:  ABS_TILT_X,
	_InputAbsoluteCodeName_1[106:116]:      ABS_TILT_Y,
	_InputAbsoluteCodeLowerName_1[106:116]: ABS_TILT_Y,
	_InputAbsoluteCodeName_1[116:130]:      ABS_TOOL_WIDTH,
	_InputAbsoluteCodeLowerName_1[116:130]: ABS_TOOL_WIDTH,
	_InputAbsoluteCodeName_2[0:10]:         ABS_VOLUME,
	_InputAbsoluteCodeLowerName_2[0:10]:    ABS_VOLUME,
	_InputAbsoluteCodeName_2[10:21]:        ABS_PROFILE,
	_InputAbsoluteCodeLowerName_2[10:21]:   ABS_PROFILE,
	_InputAbsoluteCodeName_3[0:8]:          ABS_MISC,
	_InputAbsoluteCodeLowerName_3[0:8]:     ABS_MISC,
	_InputAbsoluteCodeName_4[0:12]:         ABS_RESERVED,
	_InputAbsoluteCodeLowerName_4[0:12]:    ABS_RESERVED,
	_InputAbsoluteCodeName_4[12:23]:        ABS_MT_SLOT,
	_InputAbsoluteCodeLowerName_4[12:23]:   ABS_MT_SLOT,
	_InputAbsoluteCodeName_4[23:41]:        ABS_MT_TOUCH_MAJOR,
	_InputAbsoluteCodeLowerName_4[23:41]:   ABS_MT_TOUCH_MAJOR,
	_InputAbsoluteCodeName_4[41:59]:        ABS_MT_TOUCH_MINOR,
	_InputAbsoluteCodeLowerName_4[41:59]:   ABS_MT_TOUCH_MINOR,
	_InputAbsoluteCodeName_4[59:77]:        ABS_MT_WIDTH_MAJOR,
	_InputAbsoluteCodeLowerName_4[59:77]:   ABS_MT_WIDTH_MAJOR,
	_InputAbsoluteCodeName_4[77:95]:        ABS_MT_WIDTH_MINOR,
	_InputAbsoluteCodeLowerName_4[77:95]:   ABS_MT_WIDTH_MINOR,
	_InputAbsoluteCodeName_4[95:113]:       ABS_MT_ORIENTATION,
	_InputAbsoluteCodeLowerName_4[95:113]:  ABS_MT_ORIENTATION,
	_InputAbsoluteCodeName_4[113:130]:      ABS_MT_POSITION_X,
	_InputAbsoluteCodeLowerName_4[113:130]: ABS_MT_POSITION_X,
	_InputAbsoluteCodeName_4[130:147]:      ABS_MT_POSITION_Y,
	_InputAbsoluteCodeLowerName_4[130:147]: ABS_MT_POSITION_Y,
	_InputAbsoluteCodeName_4[147:163]:      ABS_MT_TOOL_TYPE,
	_InputAbsoluteCodeLowerName_4[147:163]: ABS_MT_TOOL_TYPE,
	_InputAbsoluteCodeName_4[163:177]:      ABS_MT_BLOB_ID,
	_InputAbsoluteCodeLowerName_4[163:177]: ABS_MT_BLOB_ID,
	_InputAbsoluteCodeName_4[177:195]:      ABS_MT_TRACKING_ID,
	_InputAbsoluteCodeLowerName_4[177:195]: ABS_MT_TRACKING_ID,
	_InputAbsoluteCodeName_4[195:210]:      ABS_MT_PRESSURE,
	_InputAbsoluteCodeLowerName_4[195:210]: ABS_MT_PRESSURE,
	_InputAbsoluteCodeName_4[210:225]:      ABS_MT_DISTANCE,
	_InputAbsoluteCodeLowerName_4[210:225]: ABS_MT_DISTANCE,
	_InputAbsoluteCodeName_4[225:238]:      ABS_MT_TOOL_X,
	_InputAbsoluteCodeLowerName_4[225:238]: ABS_MT_TOOL_X,
	_InputAbsoluteCodeName_4[238:251]:      ABS_MT_TOOL_Y,
	_InputAbsoluteCodeLowerName_4[238:251]: ABS_MT_TOOL_Y,
	_InputAbsoluteCodeName_5[0:7]:          ABS_MAX,
	_InputAbsoluteCodeLowerName_5[0:7]:     ABS_MAX,
	_InputAbsoluteCodeName_5[7:14]:         ABS_CNT,
	_InputAbsoluteCodeLowerName_5[7:14]:    ABS_CNT,
}

var _InputAbsoluteCodeNames = []string{
	_InputAbsoluteCodeName_0[0:5],
	_InputAbsoluteCodeName_0[5:10],
	_InputAbsoluteCodeName_0[10:15],
	_InputAbsoluteCodeName_0[15:21],
	_InputAbsoluteCodeName_0[21:27],
	_InputAbsoluteCodeName_0[27:33],
	_InputAbsoluteCodeName_0[33:45],
	_InputAbsoluteCodeName_0[45:55],
	_InputAbsoluteCodeName_0[55:64],
	_InputAbsoluteCodeName_0[64:71],
	_InputAbsoluteCodeName_0[71:80],
	_InputAbsoluteCodeName_1[0:9],
	_InputAbsoluteCodeName_1[9:18],
	_InputAbsoluteCodeName_1[18:27],
	_InputAbsoluteCodeName_1[27:36],
	_InputAbsoluteCodeName_1[36:45],
	_InputAbsoluteCodeName_1[45:54],
	_InputAbsoluteCodeName_1[54:63],
	_InputAbsoluteCodeName_1[63:72],
	_InputAbsoluteCodeName_1[72:84],
	_InputAbsoluteCodeName_1[84:96],
	_InputAbsoluteCodeName_1[96:106],
	_InputAbsoluteCodeName_1[106:116],
	_InputAbsoluteCodeName_1[116:130],
	_InputAbsoluteCodeName_2[0:10],
	_InputAbsoluteCodeName_2[10:21],
	_InputAbsoluteCodeName_3[0:8],
	_InputAbsoluteCodeName_4[0:12],
	_InputAbsoluteCodeName_4[12:23],
	_InputAbsoluteCodeName_4[23:41],
	_InputAbsoluteCodeName_4[41:59],
	_InputAbsoluteCodeName_4[59:77],
	_InputAbsoluteCodeName_4[77:95],
	_InputAbsoluteCodeName_4[95:113],
	_InputAbsoluteCodeName_4[113:130],
	_InputAbsoluteCodeName_4[130:147],
	_InputAbsoluteCodeName_4[147:163],
	_InputAbsoluteCodeName_4[163:177],
	_InputAbsoluteCodeName_4[177:195],
	_InputAbsoluteCodeName_4[195:210],
	_InputAbsoluteCodeName_4[210:225],
	_InputAbsoluteCodeName_4[225:238],
	_InputAbsoluteCodeName_4[238:251],
	_InputAbsoluteCodeName_5[0:7],
	_InputAbsoluteCodeName_5[7:14],
}

// InputAbsoluteCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func InputAbsoluteCodeString(s string) (InputAbsoluteCode, error) {
	if val, ok := _InputAbsoluteCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _InputAbsoluteCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to InputAbsoluteCode values", s)
}

// InputAbsoluteCodeValues returns all values of the enum
func InputAbsoluteCodeValues() []InputAbsoluteCode {
	return _InputAbsoluteCodeValues
}

// InputAbsoluteCodeStrings returns a slice of all String values of the enum
func InputAbsoluteCodeStrings() []string {
	strs := make([]string, len(_InputAbsoluteCodeNames))
	copy(strs, _InputAbsoluteCodeNames)
	return strs
}

// IsAInputAbsoluteCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i InputAbsoluteCode) IsAInputAbsoluteCode() bool {
	for _, v := range _InputAbsoluteCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
