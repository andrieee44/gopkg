// Code generated by "enumer -type=InputMultiTouchCode"; DO NOT EDIT.

package evdev

import (
	"fmt"
	"strings"
)

const (
	_InputMultiTouchCodeName_0      = "MT_TOOL_FINGERMT_TOOL_PENMT_TOOL_PALM"
	_InputMultiTouchCodeLowerName_0 = "mt_tool_fingermt_tool_penmt_tool_palm"
	_InputMultiTouchCodeName_1      = "MT_TOOL_DIAL"
	_InputMultiTouchCodeLowerName_1 = "mt_tool_dial"
	_InputMultiTouchCodeName_2      = "MT_TOOL_MAX"
	_InputMultiTouchCodeLowerName_2 = "mt_tool_max"
)

var (
	_InputMultiTouchCodeIndex_0 = [...]uint8{0, 14, 25, 37}
	_InputMultiTouchCodeIndex_1 = [...]uint8{0, 12}
	_InputMultiTouchCodeIndex_2 = [...]uint8{0, 11}
)

func (i InputMultiTouchCode) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _InputMultiTouchCodeName_0[_InputMultiTouchCodeIndex_0[i]:_InputMultiTouchCodeIndex_0[i+1]]
	case i == 10:
		return _InputMultiTouchCodeName_1
	case i == 15:
		return _InputMultiTouchCodeName_2
	default:
		return fmt.Sprintf("InputMultiTouchCode(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _InputMultiTouchCodeNoOp() {
	var x [1]struct{}
	_ = x[MT_TOOL_FINGER-(0)]
	_ = x[MT_TOOL_PEN-(1)]
	_ = x[MT_TOOL_PALM-(2)]
	_ = x[MT_TOOL_DIAL-(10)]
	_ = x[MT_TOOL_MAX-(15)]
}

var _InputMultiTouchCodeValues = []InputMultiTouchCode{MT_TOOL_FINGER, MT_TOOL_PEN, MT_TOOL_PALM, MT_TOOL_DIAL, MT_TOOL_MAX}

var _InputMultiTouchCodeNameToValueMap = map[string]InputMultiTouchCode{
	_InputMultiTouchCodeName_0[0:14]:       MT_TOOL_FINGER,
	_InputMultiTouchCodeLowerName_0[0:14]:  MT_TOOL_FINGER,
	_InputMultiTouchCodeName_0[14:25]:      MT_TOOL_PEN,
	_InputMultiTouchCodeLowerName_0[14:25]: MT_TOOL_PEN,
	_InputMultiTouchCodeName_0[25:37]:      MT_TOOL_PALM,
	_InputMultiTouchCodeLowerName_0[25:37]: MT_TOOL_PALM,
	_InputMultiTouchCodeName_1[0:12]:       MT_TOOL_DIAL,
	_InputMultiTouchCodeLowerName_1[0:12]:  MT_TOOL_DIAL,
	_InputMultiTouchCodeName_2[0:11]:       MT_TOOL_MAX,
	_InputMultiTouchCodeLowerName_2[0:11]:  MT_TOOL_MAX,
}

var _InputMultiTouchCodeNames = []string{
	_InputMultiTouchCodeName_0[0:14],
	_InputMultiTouchCodeName_0[14:25],
	_InputMultiTouchCodeName_0[25:37],
	_InputMultiTouchCodeName_1[0:12],
	_InputMultiTouchCodeName_2[0:11],
}

// InputMultiTouchCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func InputMultiTouchCodeString(s string) (InputMultiTouchCode, error) {
	if val, ok := _InputMultiTouchCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _InputMultiTouchCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to InputMultiTouchCode values", s)
}

// InputMultiTouchCodeValues returns all values of the enum
func InputMultiTouchCodeValues() []InputMultiTouchCode {
	return _InputMultiTouchCodeValues
}

// InputMultiTouchCodeStrings returns a slice of all String values of the enum
func InputMultiTouchCodeStrings() []string {
	strs := make([]string, len(_InputMultiTouchCodeNames))
	copy(strs, _InputMultiTouchCodeNames)
	return strs
}

// IsAInputMultiTouchCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i InputMultiTouchCode) IsAInputMultiTouchCode() bool {
	for _, v := range _InputMultiTouchCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
