// Code generated by "enumer -type=InputRepeatCode"; DO NOT EDIT.

package evdev

import (
	"fmt"
	"strings"
)

const _InputRepeatCodeName = "REP_DELAYREP_PERIODREP_CNT"

var _InputRepeatCodeIndex = [...]uint8{0, 9, 19, 26}

const _InputRepeatCodeLowerName = "rep_delayrep_periodrep_cnt"

func (i InputRepeatCode) String() string {
	if i >= InputRepeatCode(len(_InputRepeatCodeIndex)-1) {
		return fmt.Sprintf("InputRepeatCode(%d)", i)
	}
	return _InputRepeatCodeName[_InputRepeatCodeIndex[i]:_InputRepeatCodeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _InputRepeatCodeNoOp() {
	var x [1]struct{}
	_ = x[REP_DELAY-(0)]
	_ = x[REP_PERIOD-(1)]
	_ = x[REP_CNT-(2)]
}

var _InputRepeatCodeValues = []InputRepeatCode{REP_DELAY, REP_PERIOD, REP_CNT}

var _InputRepeatCodeNameToValueMap = map[string]InputRepeatCode{
	_InputRepeatCodeName[0:9]:        REP_DELAY,
	_InputRepeatCodeLowerName[0:9]:   REP_DELAY,
	_InputRepeatCodeName[9:19]:       REP_PERIOD,
	_InputRepeatCodeLowerName[9:19]:  REP_PERIOD,
	_InputRepeatCodeName[19:26]:      REP_CNT,
	_InputRepeatCodeLowerName[19:26]: REP_CNT,
}

var _InputRepeatCodeNames = []string{
	_InputRepeatCodeName[0:9],
	_InputRepeatCodeName[9:19],
	_InputRepeatCodeName[19:26],
}

// InputRepeatCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func InputRepeatCodeString(s string) (InputRepeatCode, error) {
	if val, ok := _InputRepeatCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _InputRepeatCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to InputRepeatCode values", s)
}

// InputRepeatCodeValues returns all values of the enum
func InputRepeatCodeValues() []InputRepeatCode {
	return _InputRepeatCodeValues
}

// InputRepeatCodeStrings returns a slice of all String values of the enum
func InputRepeatCodeStrings() []string {
	strs := make([]string, len(_InputRepeatCodeNames))
	copy(strs, _InputRepeatCodeNames)
	return strs
}

// IsAInputRepeatCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i InputRepeatCode) IsAInputRepeatCode() bool {
	for _, v := range _InputRepeatCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
