// Code generated by "enumer -type=InputLEDCode"; DO NOT EDIT.

package evdev

import (
	"fmt"
	"strings"
)

const (
	_InputLEDCodeName_0      = "LED_NUMLLED_CAPSLLED_SCROLLLLED_COMPOSELED_KANALED_SLEEPLED_SUSPENDLED_MUTELED_MISCLED_MAILLED_CHARGING"
	_InputLEDCodeLowerName_0 = "led_numlled_capslled_scrolllled_composeled_kanaled_sleepled_suspendled_muteled_miscled_mailled_charging"
	_InputLEDCodeName_1      = "LED_MAXLED_CNT"
	_InputLEDCodeLowerName_1 = "led_maxled_cnt"
)

var (
	_InputLEDCodeIndex_0 = [...]uint8{0, 8, 17, 28, 39, 47, 56, 67, 75, 83, 91, 103}
	_InputLEDCodeIndex_1 = [...]uint8{0, 7, 14}
)

func (i InputLEDCode) String() string {
	switch {
	case 0 <= i && i <= 10:
		return _InputLEDCodeName_0[_InputLEDCodeIndex_0[i]:_InputLEDCodeIndex_0[i+1]]
	case 15 <= i && i <= 16:
		i -= 15
		return _InputLEDCodeName_1[_InputLEDCodeIndex_1[i]:_InputLEDCodeIndex_1[i+1]]
	default:
		return fmt.Sprintf("InputLEDCode(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _InputLEDCodeNoOp() {
	var x [1]struct{}
	_ = x[LED_NUML-(0)]
	_ = x[LED_CAPSL-(1)]
	_ = x[LED_SCROLLL-(2)]
	_ = x[LED_COMPOSE-(3)]
	_ = x[LED_KANA-(4)]
	_ = x[LED_SLEEP-(5)]
	_ = x[LED_SUSPEND-(6)]
	_ = x[LED_MUTE-(7)]
	_ = x[LED_MISC-(8)]
	_ = x[LED_MAIL-(9)]
	_ = x[LED_CHARGING-(10)]
	_ = x[LED_MAX-(15)]
	_ = x[LED_CNT-(16)]
}

var _InputLEDCodeValues = []InputLEDCode{LED_NUML, LED_CAPSL, LED_SCROLLL, LED_COMPOSE, LED_KANA, LED_SLEEP, LED_SUSPEND, LED_MUTE, LED_MISC, LED_MAIL, LED_CHARGING, LED_MAX, LED_CNT}

var _InputLEDCodeNameToValueMap = map[string]InputLEDCode{
	_InputLEDCodeName_0[0:8]:         LED_NUML,
	_InputLEDCodeLowerName_0[0:8]:    LED_NUML,
	_InputLEDCodeName_0[8:17]:        LED_CAPSL,
	_InputLEDCodeLowerName_0[8:17]:   LED_CAPSL,
	_InputLEDCodeName_0[17:28]:       LED_SCROLLL,
	_InputLEDCodeLowerName_0[17:28]:  LED_SCROLLL,
	_InputLEDCodeName_0[28:39]:       LED_COMPOSE,
	_InputLEDCodeLowerName_0[28:39]:  LED_COMPOSE,
	_InputLEDCodeName_0[39:47]:       LED_KANA,
	_InputLEDCodeLowerName_0[39:47]:  LED_KANA,
	_InputLEDCodeName_0[47:56]:       LED_SLEEP,
	_InputLEDCodeLowerName_0[47:56]:  LED_SLEEP,
	_InputLEDCodeName_0[56:67]:       LED_SUSPEND,
	_InputLEDCodeLowerName_0[56:67]:  LED_SUSPEND,
	_InputLEDCodeName_0[67:75]:       LED_MUTE,
	_InputLEDCodeLowerName_0[67:75]:  LED_MUTE,
	_InputLEDCodeName_0[75:83]:       LED_MISC,
	_InputLEDCodeLowerName_0[75:83]:  LED_MISC,
	_InputLEDCodeName_0[83:91]:       LED_MAIL,
	_InputLEDCodeLowerName_0[83:91]:  LED_MAIL,
	_InputLEDCodeName_0[91:103]:      LED_CHARGING,
	_InputLEDCodeLowerName_0[91:103]: LED_CHARGING,
	_InputLEDCodeName_1[0:7]:         LED_MAX,
	_InputLEDCodeLowerName_1[0:7]:    LED_MAX,
	_InputLEDCodeName_1[7:14]:        LED_CNT,
	_InputLEDCodeLowerName_1[7:14]:   LED_CNT,
}

var _InputLEDCodeNames = []string{
	_InputLEDCodeName_0[0:8],
	_InputLEDCodeName_0[8:17],
	_InputLEDCodeName_0[17:28],
	_InputLEDCodeName_0[28:39],
	_InputLEDCodeName_0[39:47],
	_InputLEDCodeName_0[47:56],
	_InputLEDCodeName_0[56:67],
	_InputLEDCodeName_0[67:75],
	_InputLEDCodeName_0[75:83],
	_InputLEDCodeName_0[83:91],
	_InputLEDCodeName_0[91:103],
	_InputLEDCodeName_1[0:7],
	_InputLEDCodeName_1[7:14],
}

// InputLEDCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func InputLEDCodeString(s string) (InputLEDCode, error) {
	if val, ok := _InputLEDCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _InputLEDCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to InputLEDCode values", s)
}

// InputLEDCodeValues returns all values of the enum
func InputLEDCodeValues() []InputLEDCode {
	return _InputLEDCodeValues
}

// InputLEDCodeStrings returns a slice of all String values of the enum
func InputLEDCodeStrings() []string {
	strs := make([]string, len(_InputLEDCodeNames))
	copy(strs, _InputLEDCodeNames)
	return strs
}

// IsAInputLEDCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i InputLEDCode) IsAInputLEDCode() bool {
	for _, v := range _InputLEDCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
